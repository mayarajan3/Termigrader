//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/mayarajan/Desktop/Terms_of_Use_Scanner/Terms_of_Use_Scanner/Java/Alg_Arg.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Alg_Arg")
#ifdef RESTRICT_Alg_Arg
#define INCLUDE_ALL_Alg_Arg 0
#else
#define INCLUDE_ALL_Alg_Arg 1
#endif
#undef RESTRICT_Alg_Arg

#if !defined (Alg_Arg_) && (INCLUDE_ALL_Alg_Arg || defined(INCLUDE_Alg_Arg))
#define Alg_Arg_

@class IOSObjectArray;
@class JavaLangException;
@class JavaLangStringBuilder;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface Alg_Arg : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)Access_History;

+ (void)AlgWithNSString:(NSString *)name
             withDouble:(jdouble)diff
             withDouble:(jdouble)link
           withNSString:(NSString *)term;

+ (void)Arbitration;

+ (void)Complexity;

+ (void)Get_Countries;

+ (NSString *)getInfo;

+ (jdouble)getNumber;

+ (NSString *)getScore;

+ (void)cleanOut;

+ (void)releaseAll;

+ (void)Glorification;

+ (jboolean)LawEnforcementWithInt:(jint)index;

+ (jint)LimitWithInt:(jint)number;

+ (jboolean)LinkWithInt:(jint)i;

+ (void)Location_Knowing;

+ (void)Log;

+ (void)Modification;

+ (jboolean)NotWithInt:(jint)index
           withBoolean:(jboolean)before;

+ (NSString *)PuncOutWithNSString:(NSString *)goin;

+ (void)Read_Link;

+ (void)Responsibility;

+ (void)Risk_Algorithm;

+ (jint)SentenceWithInt:(jint)middle
                withInt:(jint)end;

+ (void)Share_Information;

+ (void)State;

+ (mach_vm_size_t)report_memory;

+ (void)Third_Party;

+ (jboolean)TitleWithInt:(jint)index;

+ (void)Vague_Language;

+ (jboolean)YouWithInt:(jint)index;

+ (jboolean)OurWithInt:(jint)index
           withBoolean:(jboolean)subj;

@end

J2OBJC_STATIC_INIT(Alg_Arg)

inline JavaLangStringBuilder *Alg_Arg_get_waive_sentence(void);
inline JavaLangStringBuilder *Alg_Arg_set_waive_sentence(JavaLangStringBuilder *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangStringBuilder *Alg_Arg_waive_sentence;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, waive_sentence, JavaLangStringBuilder *)

inline JavaLangStringBuilder *Alg_Arg_get_logging(void);
inline JavaLangStringBuilder *Alg_Arg_set_logging(JavaLangStringBuilder *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangStringBuilder *Alg_Arg_logging;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, logging, JavaLangStringBuilder *)

inline NSString *Alg_Arg_get_app_name(void);
inline NSString *Alg_Arg_set_app_name(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_app_name;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, app_name, NSString *)

inline IOSObjectArray *Alg_Arg_get_sorting(void);
inline IOSObjectArray *Alg_Arg_set_sorting(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_sorting;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, sorting, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_normal(void);
inline IOSObjectArray *Alg_Arg_set_normal(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_normal;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, normal, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_puncy(void);
inline IOSObjectArray *Alg_Arg_set_puncy(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_puncy;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, puncy, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_reg(void);
inline IOSObjectArray *Alg_Arg_set_reg(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_reg;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, reg, IOSObjectArray *)

inline id<JavaUtilList> Alg_Arg_get_countries(void);
inline id<JavaUtilList> Alg_Arg_set_countries(id<JavaUtilList> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> Alg_Arg_countries;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, countries, id<JavaUtilList>)

inline id<JavaUtilList> Alg_Arg_get_none(void);
inline id<JavaUtilList> Alg_Arg_set_none(id<JavaUtilList> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> Alg_Arg_none;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, none, id<JavaUtilList>)

inline NSString *Alg_Arg_get_original(void);
inline NSString *Alg_Arg_set_original(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_original;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, original, NSString *)

inline id<JavaUtilList> Alg_Arg_get_waiving(void);
inline id<JavaUtilList> Alg_Arg_set_waiving(id<JavaUtilList> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> Alg_Arg_waiving;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, waiving, id<JavaUtilList>)

inline id<JavaUtilMap> Alg_Arg_get_states(void);
inline id<JavaUtilMap> Alg_Arg_set_states(id<JavaUtilMap> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilMap> Alg_Arg_states;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, states, id<JavaUtilMap>)

inline jint Alg_Arg_get_bubble(void);
inline jint Alg_Arg_set_bubble(jint value);
inline jint *Alg_Arg_getRef_bubble(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint Alg_Arg_bubble;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, bubble, jint)

inline IOSObjectArray *Alg_Arg_get_vague(void);
inline IOSObjectArray *Alg_Arg_set_vague(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_vague;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, vague, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_vague2(void);
inline IOSObjectArray *Alg_Arg_set_vague2(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_vague2;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, vague2, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_location_words_array(void);
inline IOSObjectArray *Alg_Arg_set_location_words_array(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_location_words_array;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, location_words_array, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_take(void);
inline IOSObjectArray *Alg_Arg_set_take(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_take;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, take, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_give(void);
inline IOSObjectArray *Alg_Arg_set_give(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_give;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, give, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_history_array(void);
inline IOSObjectArray *Alg_Arg_set_history_array(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_history_array;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, history_array, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_see(void);
inline IOSObjectArray *Alg_Arg_set_see(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_see;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, see, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_glor(void);
inline IOSObjectArray *Alg_Arg_set_glor(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_glor;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, glor, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_no_resp(void);
inline IOSObjectArray *Alg_Arg_set_no_resp(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_no_resp;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, no_resp, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_snail(void);
inline IOSObjectArray *Alg_Arg_set_snail(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_snail;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, snail, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_link_words(void);
inline IOSObjectArray *Alg_Arg_set_link_words(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_link_words;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, link_words, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_link_one(void);
inline IOSObjectArray *Alg_Arg_set_link_one(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_link_one;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, link_one, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_not_proper(void);
inline IOSObjectArray *Alg_Arg_set_not_proper(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_not_proper;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, not_proper, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_mod_made(void);
inline IOSObjectArray *Alg_Arg_set_mod_made(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_mod_made;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, mod_made, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_mod_prev(void);
inline IOSObjectArray *Alg_Arg_set_mod_prev(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_mod_prev;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, mod_prev, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_mod(void);
inline IOSObjectArray *Alg_Arg_set_mod(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_mod;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, mod, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_enforcement(void);
inline IOSObjectArray *Alg_Arg_set_enforcement(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_enforcement;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, enforcement, IOSObjectArray *)

inline IOSObjectArray *Alg_Arg_get_nope(void);
inline IOSObjectArray *Alg_Arg_set_nope(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Alg_Arg_nope;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, nope, IOSObjectArray *)

inline jboolean Alg_Arg_get_third_party_specified(void);
inline jboolean Alg_Arg_set_third_party_specified(jboolean value);
inline jboolean *Alg_Arg_getRef_third_party_specified(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_third_party_specified;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, third_party_specified, jboolean)

inline jdouble Alg_Arg_get_third_party(void);
inline jdouble Alg_Arg_set_third_party(jdouble value);
inline jdouble *Alg_Arg_getRef_third_party(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_third_party;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, third_party, jdouble)

inline jboolean Alg_Arg_get_third_party_language(void);
inline jboolean Alg_Arg_set_third_party_language(jboolean value);
inline jboolean *Alg_Arg_getRef_third_party_language(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_third_party_language;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, third_party_language, jboolean)

inline jdouble Alg_Arg_get_complexity(void);
inline jdouble Alg_Arg_set_complexity(jdouble value);
inline jdouble *Alg_Arg_getRef_complexity(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_complexity;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, complexity, jdouble)

inline jboolean Alg_Arg_get_location(void);
inline jboolean Alg_Arg_set_location(jboolean value);
inline jboolean *Alg_Arg_getRef_location(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_location;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, location, jboolean)

inline jboolean Alg_Arg_get_binding_arbitration(void);
inline jboolean Alg_Arg_set_binding_arbitration(jboolean value);
inline jboolean *Alg_Arg_getRef_binding_arbitration(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_binding_arbitration;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, binding_arbitration, jboolean)

inline jdouble Alg_Arg_get_glorification(void);
inline jdouble Alg_Arg_set_glorification(jdouble value);
inline jdouble *Alg_Arg_getRef_glorification(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_glorification;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, glorification, jdouble)

inline jboolean Alg_Arg_get_advertisers_share(void);
inline jboolean Alg_Arg_set_advertisers_share(jboolean value);
inline jboolean *Alg_Arg_getRef_advertisers_share(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_advertisers_share;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, advertisers_share, jboolean)

inline jboolean Alg_Arg_get_share_advertisers(void);
inline jboolean Alg_Arg_set_share_advertisers(jboolean value);
inline jboolean *Alg_Arg_getRef_share_advertisers(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_share_advertisers;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, share_advertisers, jboolean)

inline jboolean Alg_Arg_get_third_share(void);
inline jboolean Alg_Arg_set_third_share(jboolean value);
inline jboolean *Alg_Arg_getRef_third_share(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_third_share;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, third_share, jboolean)

inline jboolean Alg_Arg_get_share_third(void);
inline jboolean Alg_Arg_set_share_third(jboolean value);
inline jboolean *Alg_Arg_getRef_share_third(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_share_third;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, share_third, jboolean)

inline jboolean Alg_Arg_get_share_third_legal(void);
inline jboolean Alg_Arg_set_share_third_legal(jboolean value);
inline jboolean *Alg_Arg_getRef_share_third_legal(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_share_third_legal;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, share_third_legal, jboolean)

inline jdouble Alg_Arg_get_adv_dependency(void);
inline jdouble Alg_Arg_set_adv_dependency(jdouble value);
inline jdouble *Alg_Arg_getRef_adv_dependency(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_adv_dependency;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, adv_dependency, jdouble)

inline jboolean Alg_Arg_get_access_history(void);
inline jboolean Alg_Arg_set_access_history(jboolean value);
inline jboolean *Alg_Arg_getRef_access_history(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_access_history;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, access_history, jboolean)

inline jboolean Alg_Arg_get_jurisdictional_location(void);
inline jboolean Alg_Arg_set_jurisdictional_location(jboolean value);
inline jboolean *Alg_Arg_getRef_jurisdictional_location(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_jurisdictional_location;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, jurisdictional_location, jboolean)

inline jdouble Alg_Arg_get_vague_language(void);
inline jdouble Alg_Arg_set_vague_language(jdouble value);
inline jdouble *Alg_Arg_getRef_vague_language(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_vague_language;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, vague_language, jdouble)

inline jboolean Alg_Arg_get_waive_right(void);
inline jboolean Alg_Arg_set_waive_right(jboolean value);
inline jboolean *Alg_Arg_getRef_waive_right(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_waive_right;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, waive_right, jboolean)

inline jdouble Alg_Arg_get_waivy(void);
inline jdouble Alg_Arg_set_waivy(jdouble value);
inline jdouble *Alg_Arg_getRef_waivy(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_waivy;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, waivy, jdouble)

inline jdouble Alg_Arg_get_not_responsible(void);
inline jdouble Alg_Arg_set_not_responsible(jdouble value);
inline jdouble *Alg_Arg_getRef_not_responsible(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_not_responsible;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, not_responsible, jdouble)

inline jboolean Alg_Arg_get_legal_history(void);
inline jboolean Alg_Arg_set_legal_history(jboolean value);
inline jboolean *Alg_Arg_getRef_legal_history(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_legal_history;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, legal_history, jboolean)

inline NSString *Alg_Arg_get_legal_cases(void);
inline NSString *Alg_Arg_set_legal_cases(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_legal_cases;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, legal_cases, NSString *)

inline jboolean Alg_Arg_get_snail_mail(void);
inline jboolean Alg_Arg_set_snail_mail(jboolean value);
inline jboolean *Alg_Arg_getRef_snail_mail(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_snail_mail;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, snail_mail, jboolean)

inline jboolean Alg_Arg_get_opt_out(void);
inline jboolean Alg_Arg_set_opt_out(jboolean value);
inline jboolean *Alg_Arg_getRef_opt_out(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_opt_out;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, opt_out, jboolean)

inline jboolean Alg_Arg_get_juris_opt_out(void);
inline jboolean Alg_Arg_set_juris_opt_out(jboolean value);
inline jboolean *Alg_Arg_getRef_juris_opt_out(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_juris_opt_out;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, juris_opt_out, jboolean)

inline jdouble Alg_Arg_get_links(void);
inline jdouble Alg_Arg_set_links(jdouble value);
inline jdouble *Alg_Arg_getRef_links(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_links;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, links, jdouble)

inline jboolean Alg_Arg_get_version_linked(void);
inline jboolean Alg_Arg_set_version_linked(jboolean value);
inline jboolean *Alg_Arg_getRef_version_linked(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_version_linked;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, version_linked, jboolean)

inline jboolean Alg_Arg_get_modified(void);
inline jboolean Alg_Arg_set_modified(jboolean value);
inline jboolean *Alg_Arg_getRef_modified(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_modified;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, modified, jboolean)

inline jdouble Alg_Arg_get_difficulty(void);
inline jdouble Alg_Arg_set_difficulty(jdouble value);
inline jdouble *Alg_Arg_getRef_difficulty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_difficulty;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, difficulty, jdouble)

inline NSString *Alg_Arg_get_SCORE(void);
inline NSString *Alg_Arg_set_SCORE(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_SCORE;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, SCORE, NSString *)

inline jdouble Alg_Arg_get_cumulative(void);
inline jdouble Alg_Arg_set_cumulative(jdouble value);
inline jdouble *Alg_Arg_getRef_cumulative(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble Alg_Arg_cumulative;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, cumulative, jdouble)

inline NSString *Alg_Arg_get_difficulty_str(void);
inline NSString *Alg_Arg_set_difficulty_str(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_difficulty_str;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, difficulty_str, NSString *)

inline NSString *Alg_Arg_get_links_str(void);
inline NSString *Alg_Arg_set_links_str(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_links_str;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, links_str, NSString *)

inline NSString *Alg_Arg_get_criteria_one(void);
inline NSString *Alg_Arg_set_criteria_one(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_one;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_one, NSString *)

inline NSString *Alg_Arg_get_criteria_two(void);
inline NSString *Alg_Arg_set_criteria_two(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_two;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_two, NSString *)

inline NSString *Alg_Arg_get_criteria_three(void);
inline NSString *Alg_Arg_set_criteria_three(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_three;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_three, NSString *)

inline NSString *Alg_Arg_get_criteria_four(void);
inline NSString *Alg_Arg_set_criteria_four(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_four;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_four, NSString *)

inline NSString *Alg_Arg_get_criteria_five(void);
inline NSString *Alg_Arg_set_criteria_five(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_five;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_five, NSString *)

inline NSString *Alg_Arg_get_criteria_six(void);
inline NSString *Alg_Arg_set_criteria_six(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_criteria_six;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, criteria_six, NSString *)

inline NSString *Alg_Arg_get_terms_str(void);
inline NSString *Alg_Arg_set_terms_str(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_terms_str;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, terms_str, NSString *)

inline NSString *Alg_Arg_get_test(void);
inline NSString *Alg_Arg_set_test(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *Alg_Arg_test;
J2OBJC_STATIC_FIELD_OBJ(Alg_Arg, test, NSString *)

inline jboolean Alg_Arg_get_th_party(void);
inline jboolean Alg_Arg_set_th_party(jboolean value);
inline jboolean *Alg_Arg_getRef_th_party(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_th_party;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, th_party, jboolean)

inline jboolean Alg_Arg_get_location_knowing(void);
inline jboolean Alg_Arg_set_location_knowing(jboolean value);
inline jboolean *Alg_Arg_getRef_location_knowing(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_location_knowing;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, location_knowing, jboolean)

inline jboolean Alg_Arg_get_arby(void);
inline jboolean Alg_Arg_set_arby(jboolean value);
inline jboolean *Alg_Arg_getRef_arby(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_arby;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, arby, jboolean)

inline jboolean Alg_Arg_get_share_info(void);
inline jboolean Alg_Arg_set_share_info(jboolean value);
inline jboolean *Alg_Arg_getRef_share_info(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_share_info;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, share_info, jboolean)

inline jboolean Alg_Arg_get_vague_lang(void);
inline jboolean Alg_Arg_set_vague_lang(jboolean value);
inline jboolean *Alg_Arg_getRef_vague_lang(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_vague_lang;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, vague_lang, jboolean)

inline jboolean Alg_Arg_get_access_hist(void);
inline jboolean Alg_Arg_set_access_hist(jboolean value);
inline jboolean *Alg_Arg_getRef_access_hist(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_access_hist;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, access_hist, jboolean)

inline jboolean Alg_Arg_get_glory(void);
inline jboolean Alg_Arg_set_glory(jboolean value);
inline jboolean *Alg_Arg_getRef_glory(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_glory;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, glory, jboolean)

inline jboolean Alg_Arg_get_responsibility(void);
inline jboolean Alg_Arg_set_responsibility(jboolean value);
inline jboolean *Alg_Arg_getRef_responsibility(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_responsibility;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, responsibility, jboolean)

inline jboolean Alg_Arg_get_comp(void);
inline jboolean Alg_Arg_set_comp(jboolean value);
inline jboolean *Alg_Arg_getRef_comp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_comp;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, comp, jboolean)

inline jboolean Alg_Arg_get_read_link(void);
inline jboolean Alg_Arg_set_read_link(jboolean value);
inline jboolean *Alg_Arg_getRef_read_link(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_read_link;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, read_link, jboolean)

inline jboolean Alg_Arg_get_modification(void);
inline jboolean Alg_Arg_set_modification(jboolean value);
inline jboolean *Alg_Arg_getRef_modification(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_modification;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, modification, jboolean)

inline jboolean Alg_Arg_get_initialized(void);
inline jboolean Alg_Arg_set_initialized(jboolean value);
inline jboolean *Alg_Arg_getRef_initialized(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean Alg_Arg_initialized;
J2OBJC_STATIC_FIELD_PRIMITIVE(Alg_Arg, initialized, jboolean)

FOUNDATION_EXPORT void Alg_Arg_init(Alg_Arg *self);

FOUNDATION_EXPORT Alg_Arg *new_Alg_Arg_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Alg_Arg *create_Alg_Arg_init(void);

FOUNDATION_EXPORT void Alg_Arg_AlgWithNSString_withDouble_withDouble_withNSString_(NSString *name, jdouble diff, jdouble link, NSString *term);

FOUNDATION_EXPORT NSString *Alg_Arg_getScore(void);

FOUNDATION_EXPORT NSString *Alg_Arg_getInfo(void);

FOUNDATION_EXPORT jdouble Alg_Arg_getNumber(void);

FOUNDATION_EXPORT void Alg_Arg_Risk_Algorithm(void);

FOUNDATION_EXPORT void Alg_Arg_Log(void);

FOUNDATION_EXPORT void Alg_Arg_cleanOut(void);

FOUNDATION_EXPORT void Alg_Arg_releaseAll(void);

FOUNDATION_EXPORT void Alg_Arg_Third_Party(void);

FOUNDATION_EXPORT void Alg_Arg_Vague_Language(void);

FOUNDATION_EXPORT void Alg_Arg_Location_Knowing(void);

FOUNDATION_EXPORT void Alg_Arg_Arbitration(void);

FOUNDATION_EXPORT void Alg_Arg_Share_Information(void);

FOUNDATION_EXPORT void Alg_Arg_Access_History(void);

FOUNDATION_EXPORT void Alg_Arg_Complexity(void);

FOUNDATION_EXPORT void Alg_Arg_Glorification(void);

FOUNDATION_EXPORT void Alg_Arg_Responsibility(void);

FOUNDATION_EXPORT jboolean Alg_Arg_LinkWithInt_(jint i);

FOUNDATION_EXPORT void Alg_Arg_Read_Link(void);

FOUNDATION_EXPORT void Alg_Arg_Modification(void);

FOUNDATION_EXPORT jint Alg_Arg_LimitWithInt_(jint number);

FOUNDATION_EXPORT jint Alg_Arg_SentenceWithInt_withInt_(jint middle, jint end);

FOUNDATION_EXPORT NSString *Alg_Arg_PuncOutWithNSString_(NSString *goin);

FOUNDATION_EXPORT void Alg_Arg_Get_Countries(void);

FOUNDATION_EXPORT natural_t Alg_Arg_report_memory(void);

FOUNDATION_EXPORT jboolean Alg_Arg_TitleWithInt_(jint index);

FOUNDATION_EXPORT jboolean Alg_Arg_NotWithInt_withBoolean_(jint index, jboolean before);

FOUNDATION_EXPORT jboolean Alg_Arg_LawEnforcementWithInt_(jint index);

FOUNDATION_EXPORT jboolean Alg_Arg_YouWithInt_(jint index);

FOUNDATION_EXPORT jboolean Alg_Arg_OurWithInt_withBoolean_(jint index, jboolean subj);

FOUNDATION_EXPORT void Alg_Arg_State(void);

J2OBJC_TYPE_LITERAL_HEADER(Alg_Arg)

#endif

#pragma pop_macro("INCLUDE_ALL_Alg_Arg")
