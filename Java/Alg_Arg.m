//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/mayarajan/Desktop/Terms_of_Use_Scanner/Terms_of_Use_Scanner/Java/Alg_Arg.java
//

#import <mach/mach.h>

#include "Alg_Arg.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

#line 1 "/Users/mayarajan/Desktop/Terms_of_Use_Scanner/Terms_of_Use_Scanner/Java/Alg_Arg.java"

J2OBJC_INITIALIZED_DEFN(Alg_Arg)


JavaLangStringBuilder *Alg_Arg_waive_sentence;
JavaLangStringBuilder *Alg_Arg_logging;
NSString *Alg_Arg_app_name;
NSString *Alg_Arg_original;
IOSObjectArray *Alg_Arg_sorting;
IOSObjectArray *Alg_Arg_normal;
IOSObjectArray *Alg_Arg_reg;
IOSObjectArray *Alg_Arg_puncy;
id<JavaUtilList> Alg_Arg_countries;
id<JavaUtilList> Alg_Arg_none;
id<JavaUtilList> Alg_Arg_waiving;
id<JavaUtilMap> Alg_Arg_states;
jint Alg_Arg_bubble = 4;
IOSObjectArray *Alg_Arg_vague;
IOSObjectArray *Alg_Arg_vague2;
IOSObjectArray *Alg_Arg_location_words_array;
IOSObjectArray *Alg_Arg_take;
IOSObjectArray *Alg_Arg_give;
IOSObjectArray *Alg_Arg_history_array;
IOSObjectArray *Alg_Arg_see;
IOSObjectArray *Alg_Arg_glor;
IOSObjectArray *Alg_Arg_no_resp;
IOSObjectArray *Alg_Arg_snail;
IOSObjectArray *Alg_Arg_link_words;
IOSObjectArray *Alg_Arg_link_one;
IOSObjectArray *Alg_Arg_not_proper;
IOSObjectArray *Alg_Arg_mod_made;
IOSObjectArray *Alg_Arg_mod_prev;
IOSObjectArray *Alg_Arg_mod;
IOSObjectArray *Alg_Arg_enforcement;
IOSObjectArray *Alg_Arg_nope;
IOSObjectArray *Alg_Arg_info;
jboolean Alg_Arg_third_party_specified = false;
jdouble Alg_Arg_third_party = 0.0;
jboolean Alg_Arg_third_party_language = false;
jdouble Alg_Arg_complexity = 0.0;
jboolean Alg_Arg_location = false;
jboolean Alg_Arg_binding_arbitration = false;
jdouble Alg_Arg_glorification = 0.0;
jboolean Alg_Arg_advertisers_share = false;
jboolean Alg_Arg_share_advertisers = false;
jboolean Alg_Arg_third_share = false;
jboolean Alg_Arg_share_third = false;
jboolean Alg_Arg_share_third_legal = false;
jdouble Alg_Arg_adv_dependency = 0.0;
jboolean Alg_Arg_access_history = false;
jboolean Alg_Arg_jurisdictional_location = false;
jdouble Alg_Arg_vague_language = 0.0;
jboolean Alg_Arg_waive_right = false;
jdouble Alg_Arg_waivy = 0.0;
jdouble Alg_Arg_not_responsible = 0.0;
jboolean Alg_Arg_legal_history = false;
NSString *Alg_Arg_legal_cases;
jboolean Alg_Arg_snail_mail = false;
jboolean Alg_Arg_opt_out = false;
jboolean Alg_Arg_juris_opt_out = false;
jdouble Alg_Arg_links = 0.0;
jboolean Alg_Arg_version_linked = false;
jboolean Alg_Arg_modified = false;
jdouble Alg_Arg_difficulty = 0.0;
NSString *Alg_Arg_SCORE;
jdouble Alg_Arg_cumulative = 0.0;
NSString *Alg_Arg_difficulty_str;
NSString *Alg_Arg_links_str;
NSString *Alg_Arg_terms_str;
NSString *Alg_Arg_test;
NSString *Alg_Arg_criteria_one; //third party and advertisers
NSString *Alg_Arg_criteria_two; //info company collects
NSString *Alg_Arg_criteria_three; //legal stuff
NSString *Alg_Arg_criteria_four; //modification
NSString *Alg_Arg_criteria_five; //language used
NSString *Alg_Arg_criteria_six; //difficulty of access

jboolean Alg_Arg_th_party=false;
jboolean Alg_Arg_location_knowing=false;
jboolean Alg_Arg_arby=false;
jboolean Alg_Arg_share_info=false;
jboolean Alg_Arg_vague_lang=false;
jboolean Alg_Arg_access_hist=false;
jboolean Alg_Arg_glory=false;
jboolean Alg_Arg_responsibility=false;
jboolean Alg_Arg_comp=false;
jboolean Alg_Arg_read_link=false;
jboolean Alg_Arg_modification=false;
jboolean Alg_Arg_initialized=false;



#line 8
@implementation Alg_Arg

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 8
- (instancetype)init {
  Alg_Arg_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 82
+ (void)AlgWithNSString:(NSString *)name
             withDouble:(jdouble)diff
             withDouble:(jdouble)link
           withNSString:(NSString *)term {
  Alg_Arg_AlgWithNSString_withDouble_withDouble_withNSString_(name, diff, link, term);
}


#line 137
+ (NSString *)getScore {
  return Alg_Arg_getScore();
}

+ (NSString *)getInfo {
  return Alg_Arg_getInfo();
}

+ (jdouble)getNumber {
  return Alg_Arg_getNumber();
}

+ (void)cleanOut {
    Alg_Arg_cleanOut();
}

+ (void)Risk_Algorithm {
  Alg_Arg_Risk_Algorithm();
}


#line 269
+ (void)Log {
  Alg_Arg_Log();
}


#line 370
+ (void)Third_Party {
  Alg_Arg_Third_Party();
}


#line 441
+ (void)Vague_Language {
  Alg_Arg_Vague_Language();
}


#line 461
+ (void)Location_Knowing {
  Alg_Arg_Location_Knowing();
}


#line 475
+ (void)Arbitration {
  Alg_Arg_Arbitration();
}


#line 537
+ (void)Share_Information {
  Alg_Arg_Share_Information();
}


#line 663
+ (void)Access_History {
  Alg_Arg_Access_History();
}


#line 687
+ (void)Complexity {
  Alg_Arg_Complexity();
}


#line 696
+ (void)Glorification {
  Alg_Arg_Glorification();
}


#line 719
+ (void)Responsibility {
  Alg_Arg_Responsibility();
}


#line 775
+ (jboolean)LinkWithInt:(jint)i {
  return Alg_Arg_LinkWithInt_(i);
}


#line 810
+ (void)Read_Link {
  Alg_Arg_Read_Link();
}


#line 821
+ (void)Modification {
  Alg_Arg_Modification();
}


#line 868
+ (jint)LimitWithInt:(jint)number {
  return Alg_Arg_LimitWithInt_(number);
}


#line 880
+ (jint)SentenceWithInt:(jint)middle
                withInt:(jint)end {
  return Alg_Arg_SentenceWithInt_withInt_(middle, end);
}


#line 916
+ (NSString *)PuncOutWithNSString:(NSString *)goin {
  return Alg_Arg_PuncOutWithNSString_(goin);
}


#line 922
+ (void)Get_Countries {
  Alg_Arg_Get_Countries();
}


#line 932
+ (jboolean)TitleWithInt:(jint)index {
  return Alg_Arg_TitleWithInt_(index);
}


#line 953
+ (jboolean)NotWithInt:(jint)index
           withBoolean:(jboolean)before {
  return Alg_Arg_NotWithInt_withBoolean_(index, before);
}


#line 972
+ (jboolean)LawEnforcementWithInt:(jint)index {
  return Alg_Arg_LawEnforcementWithInt_(index);
}


#line 986
+ (jboolean)YouWithInt:(jint)index {
  return Alg_Arg_YouWithInt_(index);
}

+ (jboolean)OurWithInt:(jint)index
           withBoolean:(jboolean)subj {
    return Alg_Arg_OurWithInt_withBoolean_(index, subj);
}


#line 999
+ (void)State {
  Alg_Arg_State();
}

+ (natural_t)report_memory {
    return Alg_Arg_report_memory();
}

+ (void)releaseAll {
    Alg_Arg_releaseAll();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(AlgWithNSString:withDouble:withDouble:withNSString:);
  methods[2].selector = @selector(getScore);
  methods[3].selector = @selector(getInfo);
  methods[4].selector = @selector(getNumber);
  methods[5].selector = @selector(Risk_Algorithm);
  methods[6].selector = @selector(Log);
  methods[7].selector = @selector(Third_Party);
  methods[8].selector = @selector(Vague_Language);
  methods[9].selector = @selector(Location_Knowing);
  methods[10].selector = @selector(Arbitration);
  methods[11].selector = @selector(Share_Information);
  methods[12].selector = @selector(Access_History);
  methods[13].selector = @selector(Complexity);
  methods[14].selector = @selector(Glorification);
  methods[15].selector = @selector(Responsibility);
  methods[16].selector = @selector(LinkWithInt:);
  methods[17].selector = @selector(Read_Link);
  methods[18].selector = @selector(Modification);
  methods[19].selector = @selector(LimitWithInt:);
  methods[20].selector = @selector(SentenceWithInt:withInt:);
  methods[21].selector = @selector(PuncOutWithNSString:);
  methods[22].selector = @selector(Get_Countries);
  methods[23].selector = @selector(TitleWithInt:);
  methods[24].selector = @selector(NotWithInt:withBoolean:);
  methods[25].selector = @selector(LawEnforcementWithInt:);
  methods[26].selector = @selector(YouWithInt:);
  methods[27].selector = @selector(State);
  methods[28].selector = @selector(cleanOut);
  methods[29].selector = @selector(OurWithInt:withBoolean:);
  methods[30].selector = @selector(releaseAll);
  methods[31].selector = @selector(report_memory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "waive_sentence", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x9, -1, 15, -1, -1 },
    { "logging", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x9, -1, 16, -1, -1 },
    { "app_name", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 17, -1, -1 },
    { "sorting", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 18, -1, -1 },
    { "normal", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 19, -1, -1 },
    { "countries", "LJavaUtilList;", .constantValue.asLong = 0, 0x9, -1, 20, 21, -1 },
    { "none", "LJavaUtilList;", .constantValue.asLong = 0, 0x9, -1, 22, 21, -1 },
    { "waiving", "LJavaUtilList;", .constantValue.asLong = 0, 0x9, -1, 23, 21, -1 },
    { "states", "LJavaUtilMap;", .constantValue.asLong = 0, 0x9, -1, 24, 25, -1 },
    { "bubble", "I", .constantValue.asLong = 0, 0x9, -1, 26, -1, -1 },
    { "vague", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 27, -1, -1 },
    { "vague2", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 28, -1, -1 },
    { "location_words_array", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 29, -1, -1 },
    { "take", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 30, -1, -1 },
    { "give", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 31, -1, -1 },
    { "history_array", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 32, -1, -1 },
    { "see", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 33, -1, -1 },
    { "glor", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 34, -1, -1 },
    { "no_resp", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 35, -1, -1 },
    { "snail", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 36, -1, -1 },
    { "link_words", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 37, -1, -1 },
    { "link_one", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 38, -1, -1 },
    { "not_proper", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 39, -1, -1 },
    { "mod_made", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 40, -1, -1 },
    { "mod_prev", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 41, -1, -1 },
    { "mod", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 42, -1, -1 },
    { "enforcement", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 43, -1, -1 },
    { "nope", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 44, -1, -1 },
    { "third_party_specified", "Z", .constantValue.asLong = 0, 0x9, -1, 45, -1, -1 },
    { "third_party", "D", .constantValue.asLong = 0, 0x9, -1, 46, -1, -1 },
    { "third_party_language", "Z", .constantValue.asLong = 0, 0x9, -1, 47, -1, -1 },
    { "complexity", "D", .constantValue.asLong = 0, 0x9, -1, 48, -1, -1 },
    { "location", "Z", .constantValue.asLong = 0, 0x9, -1, 49, -1, -1 },
    { "binding_arbitration", "Z", .constantValue.asLong = 0, 0x9, -1, 50, -1, -1 },
    { "glorification", "D", .constantValue.asLong = 0, 0x9, -1, 51, -1, -1 },
    { "advertisers_share", "Z", .constantValue.asLong = 0, 0x9, -1, 52, -1, -1 },
    { "share_advertisers", "Z", .constantValue.asLong = 0, 0x9, -1, 53, -1, -1 },
    { "third_share", "Z", .constantValue.asLong = 0, 0x9, -1, 54, -1, -1 },
    { "share_third", "Z", .constantValue.asLong = 0, 0x9, -1, 55, -1, -1 },
    { "share_third_legal", "Z", .constantValue.asLong = 0, 0x9, -1, 56, -1, -1 },
    { "adv_dependency", "D", .constantValue.asLong = 0, 0x9, -1, 57, -1, -1 },
    { "access_history", "Z", .constantValue.asLong = 0, 0x9, -1, 58, -1, -1 },
    { "jurisdictional_location", "Z", .constantValue.asLong = 0, 0x9, -1, 59, -1, -1 },
    { "vague_language", "D", .constantValue.asLong = 0, 0x9, -1, 60, -1, -1 },
    { "waive_right", "Z", .constantValue.asLong = 0, 0x9, -1, 61, -1, -1 },
    { "waivy", "D", .constantValue.asLong = 0, 0x9, -1, 62, -1, -1 },
    { "not_responsible", "D", .constantValue.asLong = 0, 0x9, -1, 63, -1, -1 },
    { "legal_history", "Z", .constantValue.asLong = 0, 0x9, -1, 64, -1, -1 },
    { "legal_cases", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 65, -1, -1 },
    { "snail_mail", "Z", .constantValue.asLong = 0, 0x9, -1, 66, -1, -1 },
    { "opt_out", "Z", .constantValue.asLong = 0, 0x9, -1, 67, -1, -1 },
    { "juris_opt_out", "Z", .constantValue.asLong = 0, 0x9, -1, 68, -1, -1 },
    { "links", "D", .constantValue.asLong = 0, 0x9, -1, 69, -1, -1 },
    { "version_linked", "Z", .constantValue.asLong = 0, 0x9, -1, 70, -1, -1 },
    { "modified", "Z", .constantValue.asLong = 0, 0x9, -1, 71, -1, -1 },
    { "difficulty", "D", .constantValue.asLong = 0, 0x9, -1, 72, -1, -1 },
    { "SCORE", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 73, -1, -1 },
    { "cumulative", "D", .constantValue.asLong = 0, 0x9, -1, 74, -1, -1 },
    { "difficulty_str", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 75, -1, -1 },
    { "links_str", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 76, -1, -1 },
    { "terms_str", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 77, -1, -1 },
    { "test", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 78, -1, -1 },
    { "help", "LJavaLangException;", .constantValue.asLong = 0, 0x9, -1, 79, -1, -1 },
    { "reg", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 80, -1, -1 },
      { "criteria_one", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 81, -1, -1 },
      { "criteria_two", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 82, -1, -1 },
      { "criteria_three", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 83, -1, -1 },
      { "criteria_four", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 84, -1, -1 },
      { "criteria_five", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 85, -1, -1 },
      { "criteria_six", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 86, -1, -1 },
      { "puncy", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 87, -1, -1 },
      { "th_party", "Z", .constantValue.asLong = 0, 0x9, -1, 88, -1, -1 },
      { "location_knowing", "Z", .constantValue.asLong = 0, 0x9, -1, 89, -1, -1 },
      { "arby", "Z", .constantValue.asLong = 0, 0x9, -1, 90, -1, -1 },
      { "share_info", "Z", .constantValue.asLong = 0, 0x9, -1, 91, -1, -1 },
      { "vague_lang", "Z", .constantValue.asLong = 0, 0x9, -1, 92, -1, -1 },
      { "access_hist", "Z", .constantValue.asLong = 0, 0x9, -1, 93, -1, -1 },
      { "glory", "Z", .constantValue.asLong = 0, 0x9, -1, 94, -1, -1 },
      { "responsibility", "Z", .constantValue.asLong = 0, 0x9, -1, 95, -1, -1 },
      { "comp", "Z", .constantValue.asLong = 0, 0x9, -1, 96, -1, -1 },
      { "read_link", "Z", .constantValue.asLong = 0, 0x9, -1, 97, -1, -1 },
      { "modification", "Z", .constantValue.asLong = 0, 0x9, -1, 98, -1, -1 },
      { "initialized", "Z", .constantValue.asLong = 0, 0x9, -1, 99, -1, -1 },
      
  };
  static const void *ptrTable[] = { "Alg", "LNSString;DDLNSString;", "LJavaIoIOException;", "Link", "I", "Limit", "Sentence", "II", "PuncOut", "LNSString;", "Title", "Not", "IZ", "LawEnforcement", "You", &Alg_Arg_waive_sentence, &Alg_Arg_logging, &Alg_Arg_app_name, &Alg_Arg_sorting, &Alg_Arg_normal, &Alg_Arg_reg, &Alg_Arg_puncy, &Alg_Arg_countries, "Ljava/util/List<Ljava/lang/String;>;", &Alg_Arg_none, &Alg_Arg_waiving, &Alg_Arg_states, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &Alg_Arg_bubble, &Alg_Arg_vague, &Alg_Arg_vague2, &Alg_Arg_location_words_array, &Alg_Arg_take, &Alg_Arg_give, &Alg_Arg_history_array, &Alg_Arg_see, &Alg_Arg_glor, &Alg_Arg_no_resp, &Alg_Arg_snail, &Alg_Arg_link_words, &Alg_Arg_link_one, &Alg_Arg_not_proper, &Alg_Arg_mod_made, &Alg_Arg_mod_prev, &Alg_Arg_mod, &Alg_Arg_enforcement, &Alg_Arg_nope, &Alg_Arg_third_party_specified, &Alg_Arg_third_party, &Alg_Arg_third_party_language, &Alg_Arg_complexity, &Alg_Arg_location, &Alg_Arg_binding_arbitration, &Alg_Arg_glorification, &Alg_Arg_advertisers_share, &Alg_Arg_share_advertisers, &Alg_Arg_third_share, &Alg_Arg_share_third, &Alg_Arg_share_third_legal, &Alg_Arg_adv_dependency, &Alg_Arg_access_history, &Alg_Arg_jurisdictional_location, &Alg_Arg_vague_language, &Alg_Arg_waive_right, &Alg_Arg_waivy, &Alg_Arg_not_responsible, &Alg_Arg_legal_history, &Alg_Arg_legal_cases, &Alg_Arg_snail_mail, &Alg_Arg_opt_out, &Alg_Arg_juris_opt_out, &Alg_Arg_links, &Alg_Arg_version_linked, &Alg_Arg_modified, &Alg_Arg_difficulty, &Alg_Arg_SCORE, &Alg_Arg_cumulative, &Alg_Arg_difficulty_str, &Alg_Arg_original, &Alg_Arg_links_str, &Alg_Arg_terms_str, &Alg_Arg_test, &Alg_Arg_criteria_one, &Alg_Arg_criteria_two, &Alg_Arg_criteria_three, &Alg_Arg_criteria_four, &Alg_Arg_criteria_five, &Alg_Arg_criteria_six, &Alg_Arg_th_party, &Alg_Arg_location_knowing, &Alg_Arg_arby, &Alg_Arg_share_info, &Alg_Arg_vague_lang, &Alg_Arg_access_hist, &Alg_Arg_glory, &Alg_Arg_responsibility, &Alg_Arg_comp, &Alg_Arg_read_link, &Alg_Arg_modification, &Alg_Arg_initialized };
  static const J2ObjcClassInfo _Alg_Arg = { "Alg_Arg", NULL, ptrTable, methods, fields, 7, 0x1, 28, 63, -1, -1, -1, -1, -1 };
  return &_Alg_Arg;
}

+ (void)initialize {
  if (self == [Alg_Arg class]) {
    JreStrongAssignAndConsume(&Alg_Arg_waive_sentence, new_JavaLangStringBuilder_init());
    JreStrongAssignAndConsume(&Alg_Arg_logging, new_JavaLangStringBuilder_initWithNSString_(
#line 12
    @""));
    JreStrongAssignAndConsume(&Alg_Arg_countries, new_JavaUtilArrayList_init());
    JreStrongAssignAndConsume(&Alg_Arg_none, new_JavaUtilArrayList_init());
    JreStrongAssignAndConsume(&Alg_Arg_waiving, new_JavaUtilArrayList_init());
    JreStrongAssignAndConsume(&Alg_Arg_states, new_JavaUtilHashMap_init());
    JreStrongAssignAndConsume(&Alg_Arg_vague, [IOSObjectArray newArrayWithObjects:(id[]){
#line 23
      @"like", @"example", @"such", @"etc", @"including", @"as", @"eg", @"e.g.", @"instance", @"examples" } count:10 type:NSString_class_()]);
      JreStrongAssignAndConsume(&Alg_Arg_vague2, [IOSObjectArray newArrayWithObjects:(id[]){
#line 24
        @"other", @"others", @"few", @"some", @"many", @"thing", @"stuff", @"things", @"sort", @"may" } count:10 type:NSString_class_()]);
        JreStrongAssignAndConsume(&Alg_Arg_location_words_array, [IOSObjectArray newArrayWithObjects:(id[]){
#line 25
          @"ip", @"gps" } count:2 type:NSString_class_()]);
          JreStrongAssignAndConsume(&Alg_Arg_take, [IOSObjectArray newArrayWithObjects:(id[]){
#line 26
              @"take", @"collect", @"use", @"get", @"gather", @"access", @"taking", @"collecting", @"using", @"getting", @"accessing", @"receive", @"receiving", @"obtain", @"obtaining", @"access"} count:16 type:NSString_class_()]);
            JreStrongAssignAndConsume(&Alg_Arg_give, [IOSObjectArray newArrayWithObjects:(id[]){
#line 27
              @"share", @"give", @"tell", @"sell", @"grant", @"provide", @"providing", @"sharing", @"giving", @"selling", @"granting", @"disclose"} count:12 type:NSString_class_()]);
              JreStrongAssignAndConsume(&Alg_Arg_history_array, [IOSObjectArray newArrayWithObjects:(id[]){
#line 28
                @"pages", @"websites", @"sites", @"history"} count:4 type:NSString_class_()]);
                JreStrongAssignAndConsume(&Alg_Arg_see, [IOSObjectArray newArrayWithObjects:(id[]){
#line 29
                  @"visit", @"see", @"observe", @"detect", @"discover" } count:5 type:NSString_class_()]);
                  JreStrongAssignAndConsume(&Alg_Arg_glor, [IOSObjectArray newArrayWithObjects:(id[]){
#line 30
                    @"amazing", @"safe", @"great", @"wonderful", @"awesome" } count:5 type:NSString_class_()]);
                    JreStrongAssignAndConsume(&Alg_Arg_no_resp, [IOSObjectArray newArrayWithObjects:(id[]){
#line 31
                      @"reliable", @"responsible", @"liable", @"liability", @"responsibility", @"reliability" } count:6 type:NSString_class_()]);
                      JreStrongAssignAndConsume(&Alg_Arg_snail, [IOSObjectArray newArrayWithObjects:(id[]){
#line 32
                        @"writing", @"letter", @"write", @"paper", @"written" } count:5 type:NSString_class_()]);
                        JreStrongAssignAndConsume(&Alg_Arg_link_words, [IOSObjectArray newArrayWithObjects:(id[]){
#line 33
                          @"link", @"linked", @"click", @"redirect", @"archive", @"archived" } count:6 type:NSString_class_()]);
                          JreStrongAssignAndConsume(&Alg_Arg_link_one, [IOSObjectArray newArrayWithObjects:(id[]){
#line 34
                            @"see", @"find", @"locate", @"access" } count:4 type:NSString_class_()]);
                            JreStrongAssignAndConsume(&Alg_Arg_not_proper, [IOSObjectArray newArrayWithObjects:(id[]){
#line 35
                                @"Services", @"Service", @"Content", @"Application", @"Applications", @"Material", @"Materials", @"Users", @"User", @"Open", @"Source", @"Account", @"Contract", @"Visitor", @"Visitors", @"Inc", @"Third", @"Party", @"Advertiser", @"Advertisers", @"ID", @"Family", @"News" } count:23 type:NSString_class_()]);
                              JreStrongAssignAndConsume(&Alg_Arg_mod_made, [IOSObjectArray newArrayWithObjects:(id[]){
#line 36
                                @"modified", @"changed", @"released", @"version", @"versions", @"revised", @"updated" } count:7 type:NSString_class_()]);
                                JreStrongAssignAndConsume(&Alg_Arg_mod_prev, [IOSObjectArray newArrayWithObjects:(id[]){
#line 37
                                  @"recent", @"last", @"recently" } count:3 type:NSString_class_()]);
                                    JreStrongAssignAndConsume(&Alg_Arg_info, [IOSObjectArray newArrayWithObjects:(id[]){
#line 37
                                        @"information", @"info", @"data", @"personal" } count:4 type:NSString_class_()]);
                                  JreStrongAssignAndConsume(&Alg_Arg_mod, [IOSObjectArray newArrayWithObjects:(id[]){
#line 38
                                    @"effective", @"effectual", @"operative", @"updated"} count:4 type:NSString_class_()]);
                                    JreStrongAssignAndConsume(&Alg_Arg_enforcement, [IOSObjectArray newArrayWithObjects:(id[]){
#line 39
                                      @"enforcement", @"law", @"authorities", @"agencies", @"agency", @"authority", @"national", @"legal" } count:8 type:NSString_class_()]);
                                      JreStrongAssignAndConsume(&Alg_Arg_nope, [IOSObjectArray newArrayWithObjects:(id[]){
#line 40
                                        @"no", @"none", @"not", @"avoid", @"limit", @"un", @"stop", @"unauthorized" } count:8 type:NSString_class_()]);
                                        J2OBJC_SET_INITIALIZED(Alg_Arg)
                                      }
                                    }

@end


#line 8
void Alg_Arg_init(Alg_Arg *self) {
  NSObject_init(self);
}


#line 8
Alg_Arg *new_Alg_Arg_init() {
  J2OBJC_NEW_IMPL(Alg_Arg, init)
}


#line 8
Alg_Arg *create_Alg_Arg_init() {
  J2OBJC_CREATE_IMPL(Alg_Arg, init)
}


#line 82
void Alg_Arg_AlgWithNSString_withDouble_withDouble_withNSString_(NSString *name, jdouble diff, jdouble link, NSString *term) {
  Alg_Arg_initialize();
#line 83
  JreStrongAssign(&Alg_Arg_app_name, name);
  JreStrongAssign(&Alg_Arg_original, term);
  Alg_Arg_difficulty = diff;
  Alg_Arg_links = link;
  JavaLangStringBuilder *hm = new_JavaLangStringBuilder_init();
  NSString *newString = [[term componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]] componentsJoinedByString:@" "];
    JreStrongAssign(&Alg_Arg_reg, [newString java_split:@" "]);
  JreStrongAssign(&Alg_Arg_sorting, [((NSString *) nil_chk([((NSString *) nil_chk(newString)) lowercaseString])) java_split:@" "]);
  JreStrongAssign(&Alg_Arg_normal, [newString java_split:@" "]);
    int count = 0;
    for (NSString *word in Alg_Arg_sorting) {
        [((JavaLangStringBuilder *) nil_chk(hm)) appendWithNSString:Alg_Arg_PuncOutWithNSString_([word lowercaseString])];
        count++;
        [((JavaLangStringBuilder *) nil_chk(hm)) appendWithNSString:@" "];
    }
  JreStrongAssign(&Alg_Arg_puncy, [((NSString *) nil_chk([((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(hm)) description])) lowercaseString])) java_split:@" "]);
  
#line 89
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_nope))->size_; i++) {
    [((id<JavaUtilList>) nil_chk(Alg_Arg_none)) addWithId:IOSObjectArray_Get(Alg_Arg_nope, i)];
  }
  id<JavaUtilList> dumb = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_not_proper))->size_; i++) {
    [dumb addWithId:IOSObjectArray_Get(Alg_Arg_not_proper, i)];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((NSString *) nil_chk(Alg_Arg_app_name)) java_split:@" "]))->size_; i++) {
    [dumb addWithId:IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(Alg_Arg_app_name)) java_split:@" "]), i)];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_normal))->size_; i++) {
    jboolean quote = false;
    IOSCharArray *word = [((NSString *) nil_chk(IOSObjectArray_Get(Alg_Arg_normal, i))) java_toCharArray];
    if (((IOSCharArray *) nil_chk(word))->size_ > 1) {
      if ((IOSCharArray_Get(word, 0) == '"' && IOSCharArray_Get(word, word->size_ - 1) == '"') && (IOSCharArray_Get(word, 1) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(word, 1)))) {
        [dumb addWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))];
      }
      else if (IOSCharArray_Get(word, 0) == '"' && (IOSCharArray_Get(word, 1) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(word, 1)))) {
        quote = true;
        [dumb addWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))];
      }
      else if ((IOSCharArray_Get(word, 0) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(word, 0))) && IOSCharArray_Get(word, word->size_ - 1) == '"') {
        quote = false;
        [dumb addWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))];
      }
      else if (quote && (IOSCharArray_Get(word, 0) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(word, 0)))) {
        [dumb addWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))];
      }
    }
    if ([dumb containsWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))]) {
      IOSObjectArray_Set(nil_chk(Alg_Arg_normal), i, [((NSString *) nil_chk(IOSObjectArray_Get(Alg_Arg_normal, i))) lowercaseString]);
    }
      Alg_Arg_initialized = true;
      
  }
  
#line 123
    Alg_Arg_State();
    Alg_Arg_Get_Countries();
    

#line 128
    

}


#line 137
NSString *Alg_Arg_getScore() {
  Alg_Arg_initialize();
  
#line 138
  return Alg_Arg_SCORE;
}

void Alg_Arg_releaseAll() {
    [Alg_Arg_waive_sentence _java_lang_ref_original_release];
    [Alg_Arg_logging _java_lang_ref_original_release];
    [Alg_Arg_app_name _java_lang_ref_original_release];
    [Alg_Arg_sorting _java_lang_ref_original_release];
    [Alg_Arg_normal _java_lang_ref_original_release];
    [Alg_Arg_reg _java_lang_ref_original_release];
    [Alg_Arg_puncy _java_lang_ref_original_release];
    [Alg_Arg_vague _java_lang_ref_original_release];
    [Alg_Arg_vague2 _java_lang_ref_original_release];
    [Alg_Arg_location_words_array _java_lang_ref_original_release];
    [Alg_Arg_take _java_lang_ref_original_release];
    [Alg_Arg_give _java_lang_ref_original_release];
    [Alg_Arg_history_array _java_lang_ref_original_release];
    [Alg_Arg_see _java_lang_ref_original_release];
    [Alg_Arg_glor _java_lang_ref_original_release];
    [Alg_Arg_no_resp _java_lang_ref_original_release];
    [Alg_Arg_snail _java_lang_ref_original_release];
    [Alg_Arg_link_words _java_lang_ref_original_release];
    [Alg_Arg_link_one _java_lang_ref_original_release];
    [Alg_Arg_not_proper _java_lang_ref_original_release];
    [Alg_Arg_mod_made _java_lang_ref_original_release];
    [Alg_Arg_mod_prev _java_lang_ref_original_release];
    [Alg_Arg_mod _java_lang_ref_original_release];
    [Alg_Arg_enforcement _java_lang_ref_original_release];
    [Alg_Arg_nope _java_lang_ref_original_release];
    [Alg_Arg_info _java_lang_ref_original_release];
    [Alg_Arg_legal_cases _java_lang_ref_original_release];
    [Alg_Arg_SCORE _java_lang_ref_original_release];
    [Alg_Arg_difficulty_str _java_lang_ref_original_release];
    [Alg_Arg_links_str _java_lang_ref_original_release];
    [Alg_Arg_terms_str _java_lang_ref_original_release];
    [Alg_Arg_test _java_lang_ref_original_release];
    [Alg_Arg_criteria_one _java_lang_ref_original_release]; //third party and advertisers
    [Alg_Arg_criteria_two _java_lang_ref_original_release]; //info company collects
    [Alg_Arg_criteria_three _java_lang_ref_original_release]; //legal stuff
    [Alg_Arg_criteria_four _java_lang_ref_original_release]; //modification
    [Alg_Arg_criteria_five _java_lang_ref_original_release]; //language used
    [Alg_Arg_criteria_six _java_lang_ref_original_release];
    
    
}

void Alg_Arg_cleanOut() {
    Alg_Arg_initialize();
    Alg_Arg_logging = new_JavaLangStringBuilder_init();
    JreStrongAssignAndConsume(&Alg_Arg_sorting, @"");
    JreStrongAssignAndConsume(&Alg_Arg_normal, @"");
    JreStrongAssignAndConsume(&Alg_Arg_reg, @"");
    JreStrongAssignAndConsume(&Alg_Arg_puncy, @"");
    Alg_Arg_third_party_specified = false;
    Alg_Arg_third_party = 0.0;
    Alg_Arg_third_party_language = false;
    Alg_Arg_complexity = 0.0;
    Alg_Arg_location = false;
    Alg_Arg_binding_arbitration = false;
    Alg_Arg_glorification = 0.0;
    Alg_Arg_advertisers_share = false;
    Alg_Arg_share_advertisers = false;
    Alg_Arg_third_share = false;
    Alg_Arg_share_third = false;
    Alg_Arg_share_third_legal = false;
    Alg_Arg_adv_dependency = 0.0;
    Alg_Arg_access_history = false;
     Alg_Arg_jurisdictional_location = false;
     Alg_Arg_vague_language = 0.0;
     Alg_Arg_waive_right = false;
     Alg_Arg_waivy = 0.0;
     Alg_Arg_not_responsible = 0.0;
     Alg_Arg_legal_history = false;
     Alg_Arg_legal_cases=@"";
     Alg_Arg_snail_mail = false;
     Alg_Arg_opt_out = false;
     Alg_Arg_juris_opt_out = false;
     Alg_Arg_links = 0.0;
     Alg_Arg_version_linked = false;
     Alg_Arg_modified = false;
     Alg_Arg_difficulty = 0.0;
     Alg_Arg_SCORE=@"";
     Alg_Arg_cumulative = 0.0;
     Alg_Arg_difficulty_str=@"";
     Alg_Arg_links_str=@"";
     Alg_Arg_terms_str=@"";
     Alg_Arg_test=@"";
    Alg_Arg_criteria_one=@"";
    Alg_Arg_criteria_two=@"";
    Alg_Arg_criteria_three=@"";
    Alg_Arg_criteria_four=@"";
    Alg_Arg_criteria_five=@"";
    Alg_Arg_criteria_six=@"";
    Alg_Arg_th_party=false;
    Alg_Arg_initialized=false;
    Alg_Arg_location_knowing=false;
    Alg_Arg_arby=false;
    Alg_Arg_share_info=false;
    Alg_Arg_vague_lang=false;
    Alg_Arg_access_hist=false;
    Alg_Arg_glory=false;
    Alg_Arg_responsibility=false;
    Alg_Arg_comp=false;
    Alg_Arg_read_link=false;
}

#line 141
NSString *Alg_Arg_getInfo() {
  Alg_Arg_initialize();
  NSString *ok = [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) description];
#line 142
  return ok;
}


#line 145
jdouble Alg_Arg_getNumber() {
  Alg_Arg_initialize();
  
#line 146
  return Alg_Arg_cumulative;
}


#line 149
void Alg_Arg_Risk_Algorithm() {
  Alg_Arg_initialize();
  
#line 150
  jdouble multiplier = 5.0;
  jdouble score = 100.0;
  
#line 153
    
    if (Alg_Arg_complexity>1.1) {
        score = score - 2;
        
    }
  
#line 167
  score = score - (Alg_Arg_difficulty / 6.67) * multiplier;
  
#line 170
  score = score - (Alg_Arg_links) * 2;
    
  
#line 173
  if (!(Alg_Arg_third_party_language) && !(Alg_Arg_third_party_specified) && Alg_Arg_third_party != 0.0) {
    score = score - 1 * multiplier;
  }
  else if (Alg_Arg_third_party_language) {
    score = score - .1 * multiplier;
  }
  else if (Alg_Arg_third_party_specified) {
    score = score - (multiplier * Alg_Arg_third_party);
  }
  else {
  }
  
#line 185
  if (Alg_Arg_advertisers_share || Alg_Arg_third_share) {
    if (Alg_Arg_advertisers_share && Alg_Arg_third_share) {
      
#line 186
      score = score - 1.5 * multiplier;
    }
    else {
      
#line 187
      score = score - 1 * multiplier;
    }
  }
  
#line 189
  if (Alg_Arg_share_advertisers || Alg_Arg_share_third) {
    if (Alg_Arg_share_advertisers && Alg_Arg_share_third) {
      
#line 190
      score = score - 1.0 * multiplier;
    }
    else {
      
#line 191
      score = score - 1 * multiplier;
    }
  }
  
#line 193
  if (Alg_Arg_share_third_legal) {
    score = score - .2 * 5;
  }
  
#line 198
  if (Alg_Arg_access_history) {
    score = score - 2 * multiplier;
  }
  
#line 203
  if (Alg_Arg_location) {
    score = score - 1 * multiplier;
  }
  
#line 208
  if (Alg_Arg_binding_arbitration && !Alg_Arg_snail_mail && !Alg_Arg_juris_opt_out) {
    score = score - .25 * multiplier;
  }
  else if (Alg_Arg_binding_arbitration && Alg_Arg_snail_mail && !Alg_Arg_opt_out) {
    score = score - 1 * multiplier;
  }
  else if (Alg_Arg_snail_mail && Alg_Arg_opt_out) {
    score = score - .2 * multiplier;
  }
  else {
  }
  
#line 221
  if (Alg_Arg_jurisdictional_location && !Alg_Arg_juris_opt_out) {
    score = score - .6 * multiplier;
  }
  else {
  }
  
#line 229
  if (Alg_Arg_waive_right) {
    if (Alg_Arg_waivy > 1) {
      
#line 230
      score = score - .5 * multiplier;
    }
    else if (Alg_Arg_waivy > 0) {
      
#line 231
      score = score - .25 * multiplier;
    }
    else {}
  }
  
#line 235
  if (Alg_Arg_legal_history) {
    score = score - 2 * multiplier;
  }
  
#line 240
  if (!Alg_Arg_modified && !Alg_Arg_version_linked) {
    score = score - 1 * multiplier;
  }
  else if (Alg_Arg_modified && !Alg_Arg_version_linked) {
    score = score - .5 * multiplier;
  }
  else {
  }
  
#line 249
  score = score - (Alg_Arg_vague_language * 6 * multiplier);
    
  
#line 253
  score = score - (Alg_Arg_glorification * 200 * multiplier);
    
  
    //CRITERIA ONE
    if (!(Alg_Arg_share_third || Alg_Arg_share_advertisers) && !(Alg_Arg_third_share || Alg_Arg_advertisers_share) && (Alg_Arg_third_party !=0 ||Alg_Arg_adv_dependency!=0)) {
        Alg_Arg_criteria_one = @"good";
    }
    else if ((Alg_Arg_share_third || Alg_Arg_share_advertisers) && (Alg_Arg_third_share || Alg_Arg_advertisers_share)) {
        Alg_Arg_criteria_one = @"bad";
    }
    else if ((Alg_Arg_share_third || Alg_Arg_share_advertisers) || (Alg_Arg_third_share || Alg_Arg_advertisers_share)) {
        Alg_Arg_criteria_one = @"average";
    }
    else {
        Alg_Arg_criteria_one = @"good";
    }
    
    //CRITERIA TWO
    if (Alg_Arg_access_history && Alg_Arg_location) {
        Alg_Arg_criteria_two = @"bad";
    }
    else if (Alg_Arg_access_history || Alg_Arg_location) {
        Alg_Arg_criteria_two = @"average";
    }
    else {
        Alg_Arg_criteria_two = @"good";
    }
    
    //CRITERIA THREE
    if (Alg_Arg_binding_arbitration && !Alg_Arg_snail_mail && !Alg_Arg_juris_opt_out) {
        Alg_Arg_criteria_three = @"average";
    }
    else if (Alg_Arg_binding_arbitration && Alg_Arg_snail_mail && !Alg_Arg_opt_out) {
        Alg_Arg_criteria_three = @"bad";
    }
    else if (Alg_Arg_snail_mail && Alg_Arg_opt_out) {
        Alg_Arg_criteria_three = @"average";
    }
    else {
        Alg_Arg_criteria_three = @"good";
    }
    
#line 221
    if (Alg_Arg_jurisdictional_location && !Alg_Arg_juris_opt_out) {
        Alg_Arg_criteria_three = @"bad";
    }
    else {
    }
    if ((![Alg_Arg_criteria_three isEqual:@"bad"]) && Alg_Arg_share_third_legal) {
        Alg_Arg_criteria_three = @"average"; //average or bad???
    }
    
    //CRITERIA FOUR
    if (Alg_Arg_version_linked && Alg_Arg_modified) {
        Alg_Arg_criteria_four = @"good";
    }
    else if (Alg_Arg_modified) {
        Alg_Arg_criteria_four = @"average";
    }
    else {
        Alg_Arg_criteria_four = @"bad";
    }
    
    //CRITERIA FIVE
    int sum=0;
    if ((Alg_Arg_waivy>1) || ((Alg_Arg_vague_language * 6 * multiplier)>1.5 ) || ((Alg_Arg_glorification * 200 * multiplier)>1.5) || (Alg_Arg_complexity>1.1)) {
        if (Alg_Arg_waivy>1) {
            sum++;
        }
        if ((Alg_Arg_vague_language * 6 * multiplier)>1.5 ) {
            sum++;
        }
        if ((Alg_Arg_glorification * 200 * multiplier)>1.5) {
            sum++;
        }
        if (Alg_Arg_complexity>1.1) {
            sum++;
        }
    }
    if (sum==0) {
        Alg_Arg_criteria_five = @"good";
    }
    else if (sum==1) {
        Alg_Arg_criteria_five = @"average";
    }
    else {
        Alg_Arg_criteria_five = @"bad";
    }
    
    //CRITERIA SIX
    if ((Alg_Arg_difficulty / 6.67)>.7 || (Alg_Arg_links)>.7) {
        Alg_Arg_criteria_six = @"bad";
    }
    else if ((Alg_Arg_difficulty / 6.67)>.3 || (Alg_Arg_links)>.4) {
        Alg_Arg_criteria_six = @"average";
    }
    else {
        Alg_Arg_criteria_six = @"good";
    }
    
#line 257
  score = score - (Alg_Arg_not_responsible * 100 * multiplier);
  
#line 260
  if (score < 55) {
    
#line 260
      JreStrongAssign(&Alg_Arg_SCORE, @"Grade: E");
  }
    else if (score <60) {
        JreStrongAssign(&Alg_Arg_SCORE, @"Grade: D-");
    }
  else
#line 261
  if (score < 70) {
    
#line 261
    JreStrongAssign(&Alg_Arg_SCORE, @"Grade: D+");
  }
  else
#line 262
  if (score < 75) {
    
#line 262
    JreStrongAssign(&Alg_Arg_SCORE, @"Grade: C-");
  }
    else if (score <80) {
        JreStrongAssign(&Alg_Arg_SCORE, @"Grade: C+");
    }
    else if (score <85) {
        JreStrongAssign(&Alg_Arg_SCORE, @"Grade: B-");
    }
  else
#line 263
  if (score < 90) {
    
#line 263
    JreStrongAssign(&Alg_Arg_SCORE, @"Grade: B+");
  }
    else if (score <95) {
        JreStrongAssign(&Alg_Arg_SCORE, @"Grade: A-");
    }
  else {
    
#line 264
    JreStrongAssign(&Alg_Arg_SCORE, @"Grade: A+");
  }
  Alg_Arg_cumulative = score;
}


#line 269
void Alg_Arg_Log() {
  Alg_Arg_initialize();
    
    jdouble multiplier=5;
  
#line 272
  if (!(Alg_Arg_third_party_language) && !(Alg_Arg_third_party_specified) && Alg_Arg_third_party != 0.0) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"No third party specification."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else if (Alg_Arg_third_party_language) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"The third party specification is vague."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else if (Alg_Arg_third_party_specified) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"Examples of third parties have been provided in some instances."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else {
  }
  
#line 287
  if (Alg_Arg_advertisers_share || Alg_Arg_third_share) {
    if (Alg_Arg_advertisers_share) {
      
#line 289
      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$C", @"Advertisers share information with ", Alg_Arg_app_name, '.')];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
    
#line 290
    if (Alg_Arg_third_share) {
      
#line 290
      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$C", @"Third parties share information with ", Alg_Arg_app_name, '.')];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
    
#line 291
  }
  if (Alg_Arg_share_advertisers || Alg_Arg_share_third) {
    if (Alg_Arg_share_advertisers) {
      
#line 294
      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" shares information with advertisers.")];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
    
#line 295
    if (Alg_Arg_share_third) {
      
#line 295
      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" shares information with third parties.")];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
    
#line 296
  }
  if (Alg_Arg_share_third_legal) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" shares information with third parties in legal situations.")];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  
#line 304
  if (Alg_Arg_access_history) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString: JreStrcat("$$", Alg_Arg_app_name, @" has the capability to access information from your history.")];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
    
    if ((Alg_Arg_glorification * 200 * multiplier)>1.5) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"There is a lot of glorification."];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
  
    if (Alg_Arg_links>.7) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"There is a lot of external linking."];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
    
#line 310
  if (Alg_Arg_location) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" accesses your location.")];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  
    if (Alg_Arg_complexity>1.1) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"Language used has a high complexity."];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
#line 316
  if (Alg_Arg_binding_arbitration && !Alg_Arg_snail_mail && !Alg_Arg_juris_opt_out) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" requires binding arbitration.")];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else if (Alg_Arg_binding_arbitration && Alg_Arg_snail_mail && !Alg_Arg_opt_out) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"You will be required to use snail mail in the arbitration process."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else if (Alg_Arg_snail_mail && Alg_Arg_opt_out) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"You will be required to use snail mail in the arbitration process, but only on the opt-out."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else  if (Alg_Arg_binding_arbitration) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$", Alg_Arg_app_name, @" requires binding arbitration.")];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
  else {
  }
    
    if ((Alg_Arg_vague_language * 6 * multiplier)>1.5) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"There is a lot of vague language."];
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
    }
  
#line 336
  if (Alg_Arg_jurisdictional_location && !Alg_Arg_juris_opt_out) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"Location having to do with the arbitration process is specified."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else {
  }
  
#line 345
  if (Alg_Arg_waive_right) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$@C", @"You waive your right to: ", Alg_Arg_waive_sentence, '.')];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  
#line 351
  if (Alg_Arg_legal_history) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:JreStrcat("$$$$", @"There is legal history with ", Alg_Arg_app_name, @": ", Alg_Arg_legal_cases)];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  
#line 357
  if (!Alg_Arg_modified && !Alg_Arg_version_linked) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"There is no information about previous versions of terms and conditions."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else if (Alg_Arg_modified && !Alg_Arg_version_linked) {
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"There is information about previous versions of terms and conditions, but none are provided."];
    [((JavaLangStringBuilder *) nil_chk(Alg_Arg_logging)) appendWithNSString:@"\n"];
  }
  else {
  }
}


#line 370
void Alg_Arg_Third_Party() {
  Alg_Arg_initialize();
  
#line 371
  jdouble sum = 0.0;
  
#line 373
  IOSObjectArray *goal = [IOSObjectArray arrayWithObjects:(id[]){ @"third", @"party", @"parties" } count:3 type:NSString_class_()];
  
#line 375
  JavaUtilArrayList *inc = create_JavaUtilArrayList_init();
  [inc addWithId:@"on"];
  [inc addWithId:@"in"];
  
#line 379
  JavaUtilArrayList *vague_words = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_vague))->size_; i++) {
    [vague_words addWithId:IOSObjectArray_Get(Alg_Arg_vague, i)];
  }
  jboolean temp_language = false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1; i++) {
    jboolean zero;
    if (([((NSString *) nil_chk((IOSObjectArray_Get(Alg_Arg_puncy, i)))) isEqual:IOSObjectArray_Get(goal, 0)] && (([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i + 1)))) isEqual:IOSObjectArray_Get(goal, 1)]) || ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i + 1)))) isEqual:IOSObjectArray_Get(goal, 2)]))) || ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), i))) isEqual:@"third-party"]) || ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), i))) isEqual:@"third-parties"])) {
      sum = sum + 1.0;
      for (jint j = Alg_Arg_LimitWithInt_(i - Alg_Arg_bubble); j < Alg_Arg_LimitWithInt_(i + Alg_Arg_bubble + 1); j++) {
        if ([vague_words containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
          
#line 391
          temp_language = true;
        }
      }
      
#line 395
      for (jint j = Alg_Arg_LimitWithInt_(i - Alg_Arg_bubble); j < Alg_Arg_LimitWithInt_(i + Alg_Arg_bubble); j++) {
        IOSCharArray *the_prev_word = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), Alg_Arg_LimitWithInt_(j - 1)))) java_toCharArray];
        if (Alg_Arg_LimitWithInt_(j - 1) == 0) {
          zero = true;
        }
        else {
          zero = false;
        }
        IOSCharArray *the_word = [((NSString *) nil_chk(Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), j)))) java_toCharArray];
        
#line 405
        if (((IOSCharArray *) nil_chk(the_word))->size_ != 0) {
          if (IOSCharArray_Get(the_word, 0) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(the_word, 0))) {
            if (!zero) {
              if (((IOSCharArray *) nil_chk(the_prev_word))->size_ != 0) {
                if (((IOSCharArray_Get(the_prev_word, the_prev_word->size_ - 1)) != '.') && ((IOSCharArray_Get(the_prev_word, the_prev_word->size_ - 1)) != '!')) {
                  if (!(Alg_Arg_TitleWithInt_(j))) {
                    if (!(temp_language)) {
                      jboolean hey = true;
                      for (jint k = Alg_Arg_LimitWithInt_(j - 2); k < j; k++) {
                        if ([inc containsWithId:IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), k)]) {
                          hey = false;
                        }
                      }
                      if (hey) {
                        
#line 418
                        Alg_Arg_third_party_specified = true;
                      }
                    }
                    else {
                      
#line 421
                      if (!(Alg_Arg_LawEnforcementWithInt_(j))) {
                        Alg_Arg_third_party_language = true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
          [the_prev_word _java_lang_ref_original_release];
          [the_word _java_lang_ref_original_release];
      }
    
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_th_party=true;
      }
  }
    [goal _java_lang_ref_original_release];
    [inc _java_lang_ref_original_release];
    [vague_words _java_lang_ref_original_release];
  
#line 436
  Alg_Arg_third_party = sum / (Alg_Arg_sorting->size_);
}


#line 441
void Alg_Arg_Vague_Language() {
  Alg_Arg_initialize();
  
#line 442
  jdouble sum = 0.0;
  
#line 444
  JavaUtilArrayList *vague_words = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_vague))->size_; i++) {
    [vague_words addWithId:IOSObjectArray_Get(Alg_Arg_vague, i)];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_vague2))->size_; i++) {
    [vague_words addWithId:IOSObjectArray_Get(Alg_Arg_vague2, i)];
  }
  
#line 452
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([vague_words containsWithId:(IOSObjectArray_Get(Alg_Arg_puncy, i))]) {
      sum = sum + 1.0;
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_vague_lang=true;
      }
      
  }
    
    [vague_words _java_lang_ref_original_release];
  
#line 458
  Alg_Arg_vague_language = sum / (Alg_Arg_sorting->size_);
}


#line 461
void Alg_Arg_Location_Knowing() {
  Alg_Arg_initialize();
  
#line 462
  JavaUtilArrayList *location_words = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_location_words_array))->size_; i++) {
    [location_words addWithId:IOSObjectArray_Get(Alg_Arg_location_words_array, i)];
  }
  
#line 467
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([location_words containsWithId:(IOSObjectArray_Get(Alg_Arg_puncy, i))] && !Alg_Arg_NotWithInt_withBoolean_(i, true)) {
      Alg_Arg_location = true;
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_location_knowing=true;
      }
  }
    [location_words _java_lang_ref_original_release];
}


#line 475
void Alg_Arg_Arbitration() {
  Alg_Arg_initialize();
  
#line 476
  id<JavaUtilList> mail = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_snail))->size_; i++) {
    [mail addWithId:IOSObjectArray_Get(Alg_Arg_snail, i)];
  }
  
#line 481
  IOSObjectArray *goal = [IOSObjectArray arrayWithObjects:(id[]){ @"binding", @"arbitration", @"arbitrator", @"arbitrators" } count:4 type:NSString_class_()];
    NSString *arbitration = @"arbitration";
    jint one = 0;
    jint two = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([((NSString *) nil_chk((IOSObjectArray_Get(Alg_Arg_puncy, i)))) isEqual:IOSObjectArray_Get(goal, 0)]) {
      for (jint j = i; j < Alg_Arg_LimitWithInt_(Alg_Arg_bubble + i); j++) {
        if (([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:IOSObjectArray_Get(goal, 1)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:IOSObjectArray_Get(goal, 2)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:IOSObjectArray_Get(goal, 3)]) && !Alg_Arg_NotWithInt_withBoolean_(i, true)) {
          Alg_Arg_binding_arbitration = true;
        }
      }
    }
  }
  
#line 492
  
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([((NSString *) nil_chk((IOSObjectArray_Get(Alg_Arg_puncy, i)))) isEqual:arbitration]) {
      jboolean done_one = false;
      jboolean done_two = false;
      for (jint j = Alg_Arg_LimitWithInt_(i - 10); j < Alg_Arg_LimitWithInt_(i + 10); j++) {
        if ([mail containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))] && !Alg_Arg_NotWithInt_withBoolean_(j, true)) {
          Alg_Arg_snail_mail = true;
          if (!done_one) {
            one++;
            done_one = true;
          }
        }
      }
      for (jint j = Alg_Arg_LimitWithInt_(i - 10); j < Alg_Arg_LimitWithInt_(i + 10); j++) {
        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"optout"] && Alg_Arg_snail_mail) {
          if (!done_two) {
            two++;
            done_two = true;
          }
          Alg_Arg_opt_out = true;
        }
      }
      for (jint j = Alg_Arg_LimitWithInt_(i - 10); j < Alg_Arg_LimitWithInt_(i + 10); j++) {
        if ([((id<JavaUtilList>) nil_chk(Alg_Arg_countries)) containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))] || [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) containsKeyWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), j))] || [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) containsValueWithId:Alg_Arg_PuncOutWithNSString_(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), j))]) {
          if (Alg_Arg_opt_out) {
            if (!Alg_Arg_TitleWithInt_(j)) {
              Alg_Arg_juris_opt_out = true;
            }
          }
          else {
            if (!Alg_Arg_TitleWithInt_(j)) {
              Alg_Arg_jurisdictional_location = true;
            }
          }
        }
      }
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_arby=true;
      }
  }
    [goal _java_lang_ref_original_release];
    [arbitration _java_lang_ref_original_release];
}


#line 537
void Alg_Arg_Share_Information() {
  Alg_Arg_initialize();
  
#line 538
  jdouble sum = 0.0;
  
#line 540
  id<JavaUtilList> inc = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_vague))->size_; i++) {
    [inc addWithId:IOSObjectArray_Get(Alg_Arg_vague, i)];
  }
  id<JavaUtilList> collect = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_take))->size_; i++) {
    [collect addWithId:IOSObjectArray_Get(Alg_Arg_take, i)];
  }
  id<JavaUtilList> gollect = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_give))->size_; i++) {
    [gollect addWithId:IOSObjectArray_Get(Alg_Arg_give, i)];
  }
    id<JavaUtilList> informacion = create_JavaUtilArrayList_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_info))->size_; i++) {
        [informacion addWithId:IOSObjectArray_Get(Alg_Arg_info, i)];
    }
  
#line 553
  id<JavaUtilList> adv = create_JavaUtilArrayList_init();
  [adv addWithId:@"advertiser"];
  [adv addWithId:@"advertisers"];
  [adv addWithId:@"advertising"];
  IOSObjectArray *thrp = [IOSObjectArray arrayWithObjects:(id[]){ @"third", @"party", @"parties", @"partys", @"partners", @"partner", @"provider", @"providers"} count:8 type:NSString_class_()];
  
#line 558
  for (jint i = 0; i < (((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1); i++) {
    if (([adv containsWithId:(IOSObjectArray_Get(Alg_Arg_puncy, i))] || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))) isEqual:@"thirdparty"] || ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))) isEqual:IOSObjectArray_Get(thrp, 0)] && ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i + 1))) isEqual:IOSObjectArray_Get(thrp, 1)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i + 1)))) isEqual:IOSObjectArray_Get(thrp, 2)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i + 1)))) isEqual:IOSObjectArray_Get(thrp, 3)])) || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:IOSObjectArray_Get(thrp, 4)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:IOSObjectArray_Get(thrp, 5)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:IOSObjectArray_Get(thrp, 6)] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:IOSObjectArray_Get(thrp, 7)] || ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"other"] && ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i+1)))) isEqual:@"company"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i+1)))) isEqual:@"companies"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i+1)))) isEqual:@"sources"]))) && !Alg_Arg_TitleWithInt_(i)) {
      if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
        sum = sum + 1;
      }
        
      
#line 564
      for (jint j = i; j < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i + 30)); j++) {
        if ([collect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
            jboolean from = false;
            for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i -4)); k <i; k++) {
                if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"from"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"when"]) {
                    from=true;
                }
            }
          jboolean provide = true;
          jboolean ex = true;
          for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j - 4)); k < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 3)); k++) {
            if ([gollect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
              provide = false;
            }
            if ([inc containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))] && [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"access"]) {
              ex = false;
            }
          }
            
            for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j -5)); k<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 10)); k++) {
                if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
                    if (!(Alg_Arg_LawEnforcementWithInt_(j))) {
                    if (provide && ex && from && !Alg_Arg_YouWithInt_(j) && !(Alg_Arg_NotWithInt_withBoolean_(j, true)) && !Alg_Arg_TitleWithInt_(i) && !Alg_Arg_OurWithInt_withBoolean_(j, true)) {
#line 585
                            if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
#line 585
                                Alg_Arg_share_advertisers = true;
                            }
                            else {
#line 586
                                Alg_Arg_share_third = true;
                            }
                        }
                    }
                    else {
#line 588
                        Alg_Arg_share_third_legal = true;
                    }
                }
            }
        }
        
#line 591
        if ([gollect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
            
            for (jint k =Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j - 5)); k<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 10)); k++) {
                if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
                        if (!(Alg_Arg_NotWithInt_withBoolean_(j, true)) && !Alg_Arg_YouWithInt_(j) && !Alg_Arg_TitleWithInt_(i)) {
            
#line 594
                            if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
#line 594
                                Alg_Arg_advertisers_share = true;
                            }
                            else {
#line 595
                                Alg_Arg_third_share = true;
                            }
                        }
                    }
                }
            }
      }
      for (jint j = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i - 30)); j < (i + 1); j++) {
        if ([collect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
          jboolean from = false;
          for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i -4)); k <i; k++) {
              if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"from"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"when"]) {
                  from=true;
              }
          }
          jboolean provide = true;
          jboolean ex = true;
          for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j - 4)); k < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 3)); k++) {
            if ([gollect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
              provide = false;
            }
            if ([inc containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))] && [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"access"]) {
              ex = false;
            }
          }
            
            for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j - 5)); k<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 10)); k++) {
                if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
                        if (provide && ex && from && !(Alg_Arg_NotWithInt_withBoolean_(j, true)) && !Alg_Arg_TitleWithInt_(i)) {
            
#line 620
                            if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
              
#line 620
                                Alg_Arg_advertisers_share = true;
                            }
                            else {
#line 621
                                Alg_Arg_third_share = true;
                            }
                        }
                }
          }
        }
        
#line 624
        if ([gollect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
            
            for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j - 5)); k<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 10)); k++) {
                if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
                    if (!(Alg_Arg_LawEnforcementWithInt_(j))) {
                    if (!(Alg_Arg_NotWithInt_withBoolean_(j, true)) && !Alg_Arg_YouWithInt_(j) && !Alg_Arg_TitleWithInt_(i)) {
                        
              
#line 628
                            if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
#line 628
                                Alg_Arg_share_advertisers = true;
                            }
                            else {
                
#line 629
                                Alg_Arg_share_third = true;
                            }
                        }
                        
                    }
                    else {
                        
#line 631
                        Alg_Arg_share_third_legal = true;
                    }
                }
          }
        }
      }
      
#line 635
      jboolean un_adv = false;
      jboolean deux_adv = false;
      jboolean un_th = false;
      jboolean deux_th = false;
      for (jint j = Alg_Arg_LimitWithInt_(i - 7); j < Alg_Arg_LimitWithInt_(i + 7); j++) {
        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"permission"]) {
          if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
            
#line 641
            un_adv = true;
          }
          else {
            
#line 642
            un_th = true;
          }
        }
        
#line 644
        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"extends"]) {
          if (!Alg_Arg_NotWithInt_withBoolean_(j, true)) {
            if ([adv containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
              
#line 646
              deux_adv = true;
            }
            else {
              
#line 647
              deux_th = true;
            }
          }
        }
      }
      
#line 651
      if (un_adv && deux_adv) {
        Alg_Arg_share_advertisers = true;
      }
      if (un_th && deux_th) {
        Alg_Arg_share_third = true;
      }
        
    }
      if ([gollect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))] && !Alg_Arg_NotWithInt_withBoolean_(i, true) && Alg_Arg_LawEnforcementWithInt_(i)) {
          for (jint k = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i - 10)); k<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i, i + 10)); k++) {
              if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k))]) {
                    Alg_Arg_share_third_legal = true;
              }
          }
          
          
      }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_share_info=true;
      }
    
  }
    
    [thrp _java_lang_ref_original_release];
#line 660
  Alg_Arg_adv_dependency = sum / (Alg_Arg_sorting->size_);
}


#line 663
void Alg_Arg_Access_History() {
  Alg_Arg_initialize();
  
#line 664
    id<JavaUtilList> informacion = create_JavaUtilArrayList_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_info))->size_; i++) {
        [informacion addWithId:IOSObjectArray_Get(Alg_Arg_info, i)];
    }
  id<JavaUtilList> history = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_history_array))->size_; i++) {
    [history addWithId:IOSObjectArray_Get(Alg_Arg_history_array, i)];
  }
  id<JavaUtilList> observe = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_see))->size_; i++) {
    [observe addWithId:IOSObjectArray_Get(Alg_Arg_see, i)];
  }
    id<JavaUtilList> collect = create_JavaUtilArrayList_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_take))->size_; i++) {
        [collect addWithId:IOSObjectArray_Get(Alg_Arg_take, i)];
    }
  
#line 673
  for (jint i = 0; i < (((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_); i++) {
    if ([history containsWithId:(IOSObjectArray_Get(Alg_Arg_puncy, i))] && !Alg_Arg_NotWithInt_withBoolean_(i, true) && !Alg_Arg_OurWithInt_withBoolean_(i, false)) {
      for (jint j = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i,i - Alg_Arg_bubble)); j < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i,i + Alg_Arg_bubble)); j++) {
        if ([observe containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))] && !Alg_Arg_NotWithInt_withBoolean_(j, true) && !Alg_Arg_YouWithInt_(j)) {
          Alg_Arg_access_history = true;
        }
      }
        for (jint j = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i,i - 10)); j <i; j++) {
            if ([collect containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))] && !Alg_Arg_NotWithInt_withBoolean_(j, true)) {
                Boolean from=false;
                Boolean inf=false;
                Boolean of=false;
                if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:@"use"]) {
                    for (jint m = j; m<Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j,j + 3)); m++) {
                        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), m)))) isEqual:@"of"]) {
                            of=true;
                        }
                    }
                }
                for (jint k = j; k < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(j, j + 10)); k++) {
                    if (!([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"history"])) {
                        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"from"]) {
                            from=true;
                            for (jint m = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(k, k - 3)); m < k; m++) {
                                if ([informacion containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), m))] && !of) {
                                    inf=true;
                                }
                        
                            }
                        }
                    }
                    else {
                        inf=true;
                    }
                }
                if (inf) {
                    Alg_Arg_access_history=true;
                }
            }
        }
     }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_access_hist=true;
      }
  }
}


#line 687
void Alg_Arg_Complexity() {
  Alg_Arg_initialize();
  
#line 688
  jdouble sum = 0.0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    sum = sum + ((IOSCharArray *) nil_chk([((NSString *) nil_chk((IOSObjectArray_Get(Alg_Arg_puncy, i)))) java_toCharArray]))->size_;
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_comp=true;
      }
  }
  Alg_Arg_complexity = (sum / Alg_Arg_sorting->size_) / 5.1;
    
}


#line 696
void Alg_Arg_Glorification() {
  Alg_Arg_initialize();
  
#line 697
  id<JavaUtilList> glory = create_JavaUtilArrayList_init();
  
#line 699
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_glor))->size_; i++) {
    [glory addWithId:IOSObjectArray_Get(Alg_Arg_glor, i)];
  }
  
#line 703
  jdouble sum = 0.0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    IOSCharArray *word = [((NSString *) nil_chk(IOSObjectArray_Get(Alg_Arg_sorting, i))) java_toCharArray];
    if (((IOSCharArray *) nil_chk(word))->size_ > 1) {
      if (IOSCharArray_Get(word, word->size_ - 1) == '!') {
        sum = sum + 1.0;
      }
    }
    if ([glory containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
      sum = sum + 1.0;
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_glory=true;
      }
      [word _java_lang_ref_original_release];
      
  }
  
#line 716
  Alg_Arg_glorification = sum / Alg_Arg_sorting->size_;
}


#line 719
void Alg_Arg_Responsibility() {
  Alg_Arg_initialize();
  
#line 720
  jdouble sum = 0.0;
  id<JavaUtilList> resp = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_no_resp))->size_; i++) {
    [resp addWithId:IOSObjectArray_Get(Alg_Arg_no_resp, i)];
  }
  IOSObjectArray *goal = [IOSObjectArray arrayWithObjects:(id[]){ @"waive", @"right" } count:2 type:NSString_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([((NSString *) nil_chk((IOSObjectArray_Get(Alg_Arg_puncy, i)))) isEqual:IOSObjectArray_Get(goal, 0)]) {
      for (jint j = i; j < Alg_Arg_LimitWithInt_(i + 3); j++) {
        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) isEqual:IOSObjectArray_Get(goal, 1)] && !Alg_Arg_NotWithInt_withBoolean_(i, true)) {
          Alg_Arg_waive_right = true;
          Alg_Arg_waivy = Alg_Arg_waivy + 1.0;
          if (Alg_Arg_waive_right) {
            for (jint k = i; k < Alg_Arg_LimitWithInt_(i + Alg_Arg_bubble); k++) {
              if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), k)))) isEqual:@"to"]) {
                JavaLangStringBuilder *phrase = new_JavaLangStringBuilder_init();
                for (jint h = (k + 1); h < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_((k+1), k+50)); h++) {
                    if (h==(k+1)) {
                        [((JavaLangStringBuilder *) nil_chk(phrase)) appendWithNSString:@"'"];
                    }
                    [((JavaLangStringBuilder *) nil_chk(phrase)) appendWithNSString:IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), h)];
                  IOSObjectArray *temp = [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(phrase)) description])) java_split:@" "];
                    if ((((IOSObjectArray *) nil_chk(temp))->size_)>0) {
                        IOSCharArray *ze_word = [((NSString *) nil_chk(IOSObjectArray_Get(temp, ((IOSObjectArray *) nil_chk(temp))->size_ - 1))) java_toCharArray];
                        if ((((IOSCharArray *) nil_chk(ze_word))->size_)>0) {
                            if ((IOSCharArray_Get(ze_word, ((IOSCharArray *) nil_chk(ze_word))->size_ - 1) == '.') || (IOSCharArray_Get(ze_word, ((IOSCharArray *) nil_chk(ze_word))->size_ - 1) == ';') || (IOSCharArray_Get(ze_word, ((IOSCharArray *) nil_chk(ze_word))->size_ - 1) == '!')) {
                    
#line 752
                                [((JavaLangStringBuilder *) nil_chk(phrase)) setLengthWithInt:phrase.java_length-1];
                                [((JavaLangStringBuilder *) nil_chk(phrase)) appendWithNSString:@"'"];
                            }
                        
#line 753

                            else {
                    
#line 754
                                [((JavaLangStringBuilder *) nil_chk(phrase)) appendWithNSString:@" "];
                            }
                        }
                        [ze_word _java_lang_ref_original_release];
                    }
                    [temp _java_lang_ref_original_release];
                    
                }
                  Boolean rep=false;
                IOSObjectArray *temp = [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(Alg_Arg_waive_sentence)) description])) java_split:@" AND "];
                  for (int m=0; m<((IOSObjectArray *) nil_chk(temp))->size_;m++) {
                      if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(temp), m))) isEqual: [((JavaLangStringBuilder *) nil_chk(phrase)) description]]) {
                          rep=true;
                      }
                  }
                  if (!rep) {
                      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_waive_sentence)) appendWithNSString:[((JavaLangStringBuilder *) nil_chk(phrase)) description]];
                      [((JavaLangStringBuilder *) nil_chk(Alg_Arg_waive_sentence)) appendWithNSString:@" AND "];
                  }
                  [phrase _java_lang_ref_original_release];
                  [temp _java_lang_ref_original_release];
              }
            }
          }
        }
          
      }
        
    }
    
#line 762

    if ([resp containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
      for (jint j = Alg_Arg_LimitWithInt_(i - Alg_Arg_bubble); j < i; j++) {
        if ([((id<JavaUtilList>) nil_chk(Alg_Arg_none)) containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j))]) {
          sum = sum + 1.0;
        }
      }
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_responsibility=true;
      }
  }
    if (Alg_Arg_waive_sentence.java_length>5) {
        [((JavaLangStringBuilder *) nil_chk(Alg_Arg_waive_sentence)) setLengthWithInt:Alg_Arg_waive_sentence.java_length-5];
    }
    
    
#line 771
  Alg_Arg_not_responsible = sum / Alg_Arg_sorting->size_;
}


#line 775
jboolean Alg_Arg_LinkWithInt_(jint i) {
  Alg_Arg_initialize();
  id<JavaUtilList> find_words = create_JavaUtilArrayList_init();
  id<JavaUtilList> link = create_JavaUtilArrayList_init();
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(Alg_Arg_link_one))->size_; j++) {
    [find_words addWithId:IOSObjectArray_Get(Alg_Arg_link_one, j)];
  }
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(Alg_Arg_link_words))->size_; j++) {
    [link addWithId:IOSObjectArray_Get(Alg_Arg_link_words, j)];
  }
  
#line 786
  jboolean url = false;
  IOSCharArray *word = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), i))) java_toCharArray];
  
#line 789
  if (((IOSCharArray *) nil_chk(word))->size_ > 3) {
    if ((IOSCharArray_Get(word, 0) == 'h' && IOSCharArray_Get(word, 1) == 't' && IOSCharArray_Get(word, 2) == 't' && IOSCharArray_Get(word, 3) == 'p') || (IOSCharArray_Get(word, 0) == 'w' && IOSCharArray_Get(word, 1) == 'w' && IOSCharArray_Get(word, 2) == 'w')) {
      url = true;
    }
  }
  
#line 795
  jboolean quote = false;
  if (word->size_ != 0) {
    if (IOSCharArray_Get(word, 0) == '"' && IOSCharArray_Get(word, word->size_ - 1) == '"') {
      quote = true;
    }
  }
  if (url || quote || ([find_words containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))] && [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), Alg_Arg_LimitWithInt_(i + 1)))) isEqual:@"more"]) || [link containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
      [word _java_lang_ref_original_release];
    return true;
  }
  else {
      [word _java_lang_ref_original_release];
    return false;
  }
}


#line 810
void Alg_Arg_Read_Link() {
  Alg_Arg_initialize();
  
#line 811
  jdouble sum = 0;
  for (jint i = 0; i < (((IOSObjectArray *) nil_chk(Alg_Arg_sorting))->size_ - 1); i++) {
    if (Alg_Arg_LinkWithInt_(i)) {
      sum = sum + 1.0;
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_sorting))->size_-1)) {
          Alg_Arg_read_link=true;
      }
  }
}


#line 821
void Alg_Arg_Modification() {
  Alg_Arg_initialize();
  
#line 822
  id<JavaUtilList> mod_words = create_JavaUtilArrayList_init();
  id<JavaUtilList> prev_words = create_JavaUtilArrayList_init();
  id<JavaUtilList> list_words = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_mod_made))->size_; i++) {
    [mod_words addWithId:IOSObjectArray_Get(Alg_Arg_mod_made, i)];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_mod_prev))->size_; i++) {
    [prev_words addWithId:IOSObjectArray_Get(Alg_Arg_mod_prev, i)];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_mod))->size_; i++) {
    [list_words addWithId:IOSObjectArray_Get(Alg_Arg_mod, i)];
  }
  
#line 835
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_; i++) {
    if ([list_words containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]  || ([prev_words containsWithId:(IOSObjectArray_Get(Alg_Arg_puncy, i))] && ([mod_words containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), Alg_Arg_LimitWithInt_(i + 1)))] || [mod_words containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), Alg_Arg_LimitWithInt_(i + 2)))]))) {
      for (jint j = i; j < Alg_Arg_LimitWithInt_(i + 10); j++) {
        IOSCharArray *word = [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), j)))) java_toCharArray];
        jboolean number = true;
        for (jint k = 0; k < ((IOSCharArray *) nil_chk(word))->size_; k++) {
          if (JavaLangCharacter_isLetterWithChar_(IOSCharArray_Get(word, k))) {
              number = false;
          }
        }
        if (number && (word->size_ == 2 || word->size_ == 4 || word->size_ == 6 || word->size_ == 8)) {
          Alg_Arg_modified = true;
        }
          [word _java_lang_ref_original_release];
      }
      if (Alg_Arg_modified) {
        for (jint j = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i,i - 10)); j < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(i,i + 10)); j++) {
          if (Alg_Arg_LinkWithInt_(j)) {
            Alg_Arg_version_linked = true;
          }
        }
      }
    }
      if (i==(((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_-1)) {
          Alg_Arg_modification=true;
      }
  }
}


#line 868
jint Alg_Arg_LimitWithInt_(jint number) {
  Alg_Arg_initialize();
  
#line 869
  if (number < 0) {
    return 0;
  }
  else if ((number) > (((IOSObjectArray *) nil_chk(Alg_Arg_puncy))->size_ - 1)) {
    return Alg_Arg_puncy->size_ ;
  }
  else {
    return number;
  }
}


#line 880
jint Alg_Arg_SentenceWithInt_withInt_(jint mid, jint en) {
  Alg_Arg_initialize();
    jint middle  = Alg_Arg_LimitWithInt_(mid);
    jint end = Alg_Arg_LimitWithInt_(en);
#line 881
  if (middle > end) {
    jint j = middle - 1;
    for (jint i = 0; i < (middle - end); i++) {
      IOSCharArray *hurp = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), j))) java_toCharArray];
      if (((IOSCharArray *) nil_chk(hurp))->size_ > 0) {
        if (IOSCharArray_Get(hurp, hurp->size_ - 1) == '.' || IOSCharArray_Get(hurp, hurp->size_ - 1) == ';') {
          if (end < j) {
            return j+1;
          }
        }
      }
      if (j > 0) {
        j = j - 1;
      }
        [hurp _java_lang_ref_original_release];
    }
  }
  else {
    jint j = middle;
    for (jint i = 0; i < (end - middle); i++) {
      IOSCharArray *hurp = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_sorting), j))) java_toCharArray];
      if (((IOSCharArray *) nil_chk(hurp))->size_ > 0) {
        if (IOSCharArray_Get(hurp, hurp->size_ - 1) == '.' || IOSCharArray_Get(hurp, hurp->size_ - 1) == ';') {
          if (end > j) {
            return j+1;
          }
        }
      }
      if (j < ((IOSObjectArray *) nil_chk(Alg_Arg_sorting))->size_ - 1) {
        j = j + 1;
      }
        [hurp _java_lang_ref_original_release];
    }
  }
  return end;
}


#line 916
NSString *Alg_Arg_PuncOutWithNSString_(NSString *goin) {
Alg_Arg_initialize();
  
#line 917
  NSString *noWhitespace = [((NSString *) nil_chk(goin)) java_replaceAll:@"\\W" withReplacement:@""];
  return noWhitespace;
}


#line 922
void Alg_Arg_Get_Countries() {
  Alg_Arg_initialize();
  
#line 923
  IOSObjectArray *locales = JavaUtilLocale_getAvailableLocales();
  {
    IOSObjectArray *a__ =
#line 924
    locales;
    JavaUtilLocale * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaUtilLocale * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaUtilLocale *locale = *b__++;
      
#line 925
      NSString *name = [((JavaUtilLocale *) nil_chk(locale)) getDisplayCountry];
      if (![@"" isEqual:name]) {
        [((id<JavaUtilList>) nil_chk(Alg_Arg_countries)) addWithId:[((NSString *) nil_chk(name)) lowercaseString]];
      }
        [name _java_lang_ref_original_release];
        [locale _java_lang_ref_original_release];
    }
      [a__ _java_lang_ref_original_release];
  }
    [locales _java_lang_ref_original_release];
}


#line 932
jboolean Alg_Arg_TitleWithInt_(jint index) {
  Alg_Arg_initialize();
  
#line 933
  jint sum = 0;
  jboolean dash = false;
  for (jint i = Alg_Arg_LimitWithInt_(index - 4); i < Alg_Arg_LimitWithInt_(index + 4); i++) {
    IOSCharArray *word = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(Alg_Arg_normal), i))) java_toCharArray];
    if (((IOSCharArray *) nil_chk(word))->size_ != 0) {
      if (IOSCharArray_Get(word, 0) == JavaLangCharacter_toUpperCaseWithChar_(IOSCharArray_Get(word, 0))) {
        for (jint j = 0; j < word->size_; j++) {
          if (IOSCharArray_Get(word, j) == '-') {
            dash = true;
          }
        }
        if (dash) {
          
#line 944
          sum = sum + 2;
        }
        else {
          
#line 945
          sum = sum + 1;
        }
      }
    }
      [word _java_lang_ref_original_release];
  }
  
#line 949
  if (sum >= 3) {
    
#line 949
    return true;
  }
  else {
    
#line 950
    return false;
  }
}


#line 953
jboolean Alg_Arg_NotWithInt_withBoolean_(jint index, jboolean before) {
  Alg_Arg_initialize();
  
#line 954
  jboolean temp = false;
  if (before) {
    for (jint i = Alg_Arg_LimitWithInt_(index - 5); i < index; i++) {
      if ([((id<JavaUtilList>) nil_chk(Alg_Arg_none)) containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
        temp = true;
      }
    }
  }
  else {
    for (jint i = index; i < Alg_Arg_LimitWithInt_(index + Alg_Arg_bubble); i++) {
      if ([((id<JavaUtilList>) nil_chk(Alg_Arg_none)) containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
        temp = true;
      }
    }
  }
  return temp;
}


#line 972
jboolean Alg_Arg_LawEnforcementWithInt_(jint index) {
  Alg_Arg_initialize();
  
#line 973
  jboolean temp = false;
  id<JavaUtilList> police = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Alg_Arg_enforcement))->size_; i++) {
    [police addWithId:IOSObjectArray_Get(Alg_Arg_enforcement, i)];
  }
  for (jint i = Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(index, index - 50)); i < Alg_Arg_LimitWithInt_(Alg_Arg_SentenceWithInt_withInt_(index,index + 50)); i++) {
      
    if ([police containsWithId:(IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i))]) {
      temp = true;
    }
  }
  return temp;
}


#line 986
jboolean Alg_Arg_YouWithInt_(jint index) {
  Alg_Arg_initialize();
  
#line 987
  jboolean temp = false;
  for (jint i = Alg_Arg_LimitWithInt_(index - 1); i < index; i++) {
    if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"you"]) {
      temp = true;
    }
  }
  return temp;
}

jboolean Alg_Arg_OurWithInt_withBoolean_(jint index, jboolean subj) {
    Alg_Arg_initialize();
    IOSObjectArray *help = [((NSString *) nil_chk([((NSString *) nil_chk(Alg_Arg_app_name)) lowercaseString])) java_split:@" "];
    NSString *mm = (IOSObjectArray_Get(help, ((IOSObjectArray *) nil_chk(help))->size_-1));
    NSString *possess = [mm stringByAppendingString:@"s"];
    [mm _java_lang_ref_original_release];
#line 987
    jboolean temp = false;
    jboolean hm = false;
    if (!subj) {
    for (jint i = Alg_Arg_LimitWithInt_(index - 1); i < index; i++) {
        if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:possess] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"exiting"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"exit"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"referring"]) {
            temp = true;
        }
        if (!temp) {
            
            for (jint i = Alg_Arg_LimitWithInt_(index - 3); i < Alg_Arg_LimitWithInt_(index+3); i++) {
                if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"our"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:possess]) {
                    hm= true;
                }
            }
        }
    }
    }
    else {
        for (jint i = Alg_Arg_LimitWithInt_(index - 3); i < Alg_Arg_LimitWithInt_(index+3); i++) {
            if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:@"we"] || [((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(Alg_Arg_puncy), i)))) isEqual:((NSString *) nil_chk([((NSString *) nil_chk(Alg_Arg_app_name)) lowercaseString]))]) {
                hm= true;
            }
        }
    }
    if (temp || hm) {
        [help _java_lang_ref_original_release];
        [possess _java_lang_ref_original_release];
        return true;
    }
    else {
        [help _java_lang_ref_original_release];
        [possess _java_lang_ref_original_release];
        return false;
    }
}

void Alg_Arg_State() {
  Alg_Arg_initialize();
  
#line 1044
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Alabama" withId:@"AL"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Alaska" withId:@"AK"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Alberta" withId:@"AB"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"American Samoa" withId:@"AS"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Arizona" withId:@"AZ"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Arkansas" withId:@"AR"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Armed Forces (AE)" withId:@"AE"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Armed Forces Americas" withId:@"AA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Armed Forces Pacific" withId:@"AP"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"British Columbia" withId:@"BC"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"California" withId:@"CA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Colorado" withId:@"CO"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Connecticut" withId:@"CT"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Delaware" withId:@"DE"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"District Of Columbia" withId:@"DC"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Florida" withId:@"FL"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Georgia" withId:@"GA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Guam" withId:@"GU"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Hawaii" withId:@"HI"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Idaho" withId:@"ID"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Illinois" withId:@"IL"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Indiana" withId:@"IN"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Iowa" withId:@"IA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Kansas" withId:@"KS"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Kentucky" withId:@"KY"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Louisiana" withId:@"LA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Maine" withId:@"ME"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Manitoba" withId:@"MB"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Maryland" withId:@"MD"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Massachusetts" withId:@"MA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Michigan" withId:@"MI"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Minnesota" withId:@"MN"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Mississippi" withId:@"MS"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Missouri" withId:@"MO"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Montana" withId:@"MT"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Nebraska" withId:@"NE"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Nevada" withId:@"NV"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"New Brunswick" withId:@"NB"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"New Hampshire" withId:@"NH"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"New Jersey" withId:@"NJ"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"New Mexico" withId:@"NM"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"New York" withId:@"NY"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Newfoundland" withId:@"NF"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"North Carolina" withId:@"NC"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"North Dakota" withId:@"ND"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Northwest Territories" withId:@"NT"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Nova Scotia" withId:@"NS"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Nunavut" withId:@"NU"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Ohio" withId:@"OH"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Oklahoma" withId:@"OK"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Ontario" withId:@"ON"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Oregon" withId:@"OR"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Pennsylvania" withId:@"PA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Prince Edward Island" withId:@"PE"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Puerto Rico" withId:@"PR"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Quebec" withId:@"QC"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Rhode Island" withId:@"RI"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Saskatchewan" withId:@"SK"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"South Carolina" withId:@"SC"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"South Dakota" withId:@"SD"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Tennessee" withId:@"TN"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Texas" withId:@"TX"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Utah" withId:@"UT"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Vermont" withId:@"VT"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Virgin Islands" withId:@"VI"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Virginia" withId:@"VA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Washington" withId:@"WA"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"West Virginia" withId:@"WV"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Wisconsin" withId:@"WI"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Wyoming" withId:@"WY"];
  [((id<JavaUtilMap>) nil_chk(Alg_Arg_states)) putWithId:@"Yukon Territory" withId:@"YT"];
}

natural_t Alg_Arg_report_memory()
{
        mach_port_t host_port;
        mach_msg_type_number_t host_size;
        vm_size_t pagesize;
        
        host_port = mach_host_self();
        host_size = sizeof(vm_statistics_data_t) / sizeof(integer_t);
        host_page_size(host_port, &pagesize);
        
        vm_statistics_data_t vm_stat;
        
        if (host_statistics(host_port, HOST_VM_INFO, (host_info_t)&vm_stat, &host_size) != KERN_SUCCESS) {
            NSLog(@"Failed to fetch vm statistics");
        }
        
        /* Stats in bytes */
        natural_t mem_used = (vm_stat.inactive_count * pagesize);
        natural_t mem_free = vm_stat.free_count * pagesize;
        natural_t mem_total = mem_used + mem_free;
        return mem_used/mem_total;
    
}


J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Alg_Arg)
